[{"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/index.js":"1","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/App.js":"2","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/reportWebVitals.js":"3","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/regionBox/RegionBox.js":"4","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/clock/Clock.js":"5","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/adminPanel/AdminPanel.js":"6","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js":"7","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/timeSelector/timeSelector.js":"8","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/timeSelector/TimeSelector.js":"9","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/footer/Footer.js":"10","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/continentDropdown/ContinentDropdown.js":"11","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/constants.js":"12"},{"size":524,"mtime":1617525591415,"results":"13","hashOfConfig":"14"},{"size":3621,"mtime":1621849130028,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1617524024820,"results":"16","hashOfConfig":"14"},{"size":2924,"mtime":1618765064412,"results":"17","hashOfConfig":"14"},{"size":18241,"mtime":1619169759495,"results":"18","hashOfConfig":"14"},{"size":3616,"mtime":1621848606685,"results":"19","hashOfConfig":"14"},{"size":1332,"mtime":1618682110295,"results":"20","hashOfConfig":"14"},{"size":407,"mtime":1617723120125,"results":"21","hashOfConfig":"22"},{"size":2734,"mtime":1619168758083,"results":"23","hashOfConfig":"14"},{"size":303,"mtime":1618151478158,"results":"24","hashOfConfig":"14"},{"size":954,"mtime":1618849189221,"results":"25","hashOfConfig":"14"},{"size":204,"mtime":1619172069315,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},"1nwkbpd",{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":2,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j1oauz",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/index.js",["57"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as styles from'./index.module.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["58","59"],"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/App.js",["60","61","62"],"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/reportWebVitals.js",[],"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/regionBox/RegionBox.js",["63","64","65","66"],"import React, { useState, useEffect } from 'react'; \nimport * as styles from './RegionBox.module.scss'; \nimport { AiFillMinusCircle } from 'react-icons/ai'; \nimport { AiFillPlusCircle } from 'react-icons/ai'; \n\nimport Clock from '../clock/Clock'; \n\n\n\nconst RegionBox = ({ continentName, data }) => {\n\n   \n    const [ show, setShow ] = useState(true);\n    const [ isLoading, setIsLoading ] = useState(false); \n\n\n    const showHandler = () => {\n        setShow(show => !show ); \n    }\n\n    const continentMap = (returnArr, mapArr ) => {\n\n        returnArr = (<div className={styles.clockBoxes}>   \n            { \n                mapArr.map(el => \n                    \n                    <Clock \n                        key={el['id']}\n                        regionName={el['country']}\n                        cityName={el['city']}\n                        utcoffset={el['utcoffset']}\n                        openHoursOne={el['openHoursOne']}\n                        openHoursTwo={el['openHoursTwo']}\n                    />) \n            }\n        </div>); \n\n        return returnArr; \n\n    }\n\n    //need to optimize this part \n    const renderByContinent = (continentName) =>{\n\n       //mapArr\n        let europe = []; \n        let asia = []; \n        let southAmerica = []; \n        let northAmerica = []; \n\n        //returnArr\n        let eur = []; \n        let as = []; \n        let southA = []; \n        let northA = []; \n        \n        \n        data.forEach(d => {\n\n            if(d.continent === 'Europe'){\n                europe.push(d); \n            } else if(d.continent === 'Asia'){\n                asia.push(d);\n            } else if(d.continent == 'South America'){\n                southAmerica.push(d); \n            } else if(d.continent == 'North America'){\n                northAmerica.push(d); \n            } \n        }); \n\n          \n        switch(continentName){\n            case 'Asia': \n                return continentMap(as, asia);  \n            case 'Europe': \n                return continentMap(eur, europe);  \n            case 'South America': \n                return continentMap(southA, southAmerica); \n            case 'North America':\n                return continentMap(northA, northAmerica);; \n            default: \n                return 0; \n        }\n    }\n\n\n    return (\n        <div className={styles.regionBox}>\n            <div className={styles.greyStripe}>\n                <div className={styles.left}>{continentName}</div>\n                <div className={styles.right}>\n                    { isLoading && <div>Loading...</div> }\n                    { show ?  \n                        <AiFillMinusCircle onClick={showHandler}/> : \n                        <AiFillPlusCircle onClick={showHandler}/>\n                    }  \n                </div>\n            </div>\n            { show && renderByContinent(continentName)}\n            \n        </div>\n    )\n}\n\nexport default RegionBox; \n","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/clock/Clock.js",["67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86"],"import React, { useState, useEffect, useRef } from 'react'; \nimport { Overlay, Popover } from 'react-bootstrap';\n\nimport './Clock.css'; \nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nconst Clock = ({ regionName, cityName, utcoffset, openHoursOne, openHoursTwo }) => {\n\n    const date = new Date;\n    const localUTC = date.getTimezoneOffset();\n\n    let utcDiff = Math.abs(localUTC/60) - (utcoffset/60); \n    let breakStatus = false; \n    let opHoursOne = false; \n    let opHoursTwo = false; \n    \n\n    const initialState = { secondRatio: 0, minuteRatio: 0, hourRatio: 0 }; \n    \n    const [ clockState, setClockState ] = useState(initialState);\n    const [ time, setTime ] = useState(0);  \n    const [ dayTimeStr, setDayTimeStr ] = useState('');\n    const [ hoursClosedFriday, setHoursClosedFriday ] = useState(false); \n    const [ hoursOpen, setHoursOpen ] = useState(false); \n    \n\n    //for bs popup \n    const [show, setShow] = useState(false);\n    const [target, setTarget] = useState(null);\n    const ref = useRef(null);\n\n    \n    \n    const handleClick = (event) => {\n        setShow(!show);\n        setTarget(event.target);\n    };\n\n\n    const calculateUniversalUTC = () => {\n\n        //returns local date from where the app is used \n        let date = new Date;    \n        //console.log(date); \n    \n        //offcet taken at the place where app is used \n        let app_utc_offcet = date.getTimezoneOffset(); //returns -480 \n\n        //this is the abstract date according to UTC\n        date.setHours(date.getHours() + (app_utc_offcet/60)); \n        //console.log('ABSTRACT TIME', date); \n\n        return date; \n    }\n\n    const calculateCurrentLocalDate = () => {\n\n        let utcdate = calculateUniversalUTC(); \n        //console.log(\"UTCDATE\" + utcdate); \n\n        //calculate time according to offcet of the country\n        utcdate.setHours(utcdate.getHours() + (utcoffset/60)); \n        //console.log('SHANGHAI TIME', utcdate); \n\n        return utcdate; \n\n    }\n\n    const formatDate = (date) => {\n        let d = new Date(date); \n\n        let month = '' + (d.getMonth() + 1);\n        let day = '' + d.getDate();\n        let year = d.getFullYear();\n\n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n\n        return [year, month, day].join('-');\n    }\n\n    const checkSingleDigit = (time) => {\n        if(String(+time).charAt(0) == time){\n            time = '0' + time; \n        }\n        return time; \n    }\n\n\n\n    const digitalClockConverter = (date) => {\n\n        \n        //getting day of the week \n        const days = ['Sun','Mon','Tue','Wed','Thur','Fri','Sat'];\n        let dayNum = Number(date.getDay()); \n        let stsDay = days[dayNum]; \n        \n\n        //getting hours in am/pm \n        let hours = date.getHours();\n        let minutes = date.getMinutes();\n        let ampm = hours >= 12 ? 'PM' : 'AM';\n        hours = hours % 12;\n        hours = hours ? hours : 12; \n        minutes = minutes < 10 ? '0'+minutes : minutes;\n        let strTime = hours + ':' + minutes + ' ' + ampm;\n        \n        let timeStr = stsDay + ' ' + strTime;\n\n        setDayTimeStr( dayTimeStr => timeStr); \n        \n    } \n  \n\n    const clockStateHandler = (date) => {\n        \n        let secondRatio = date.getSeconds() / 60; \n        let minuteRatio = (secondRatio + date.getMinutes()) / 60; \n        let hourRatio = (minuteRatio + date.getHours()) / 12;  \n    \n        setClockState({...clockState, secondRate: secondRatio, minuteRate: minuteRatio, hourRate: hourRatio});\n\n    }\n\n    const clockHandler = () => {\n\n        \n        let currentDate = calculateCurrentLocalDate(); \n    \n        clockStateHandler(currentDate); \n        digitalClockConverter(currentDate);\n\n\n    }\n\n    const calculateLocalTime = (openHours) => {\n\n\n\n        let hoursFrom = Number(openHours.split('-')[0].slice(0,2)) + utcDiff; \n        let hoursTo = Number(openHours.split('-')[1].slice(0,2)) + utcDiff;\n        \n        \n        if(hoursTo > 24){\n            hoursTo = hoursTo%24; \n        }\n\n        checkSingleDigit(hoursFrom); \n        checkSingleDigit(hoursTo); \n        \n        return { hoursFrom, hoursTo }; \n        \n    }\n\n    const calculateRemainingTime = (endtime) => {\n        \n        let hourWithDiff = new Date().getHours()-utcDiff; \n        let date = new Date(); \n\n        //let dateInCountry = ''; \n\n        //check if day in appRegion is the same as date in country\n        // if(date.getDate() === calculateCurrentLocalDate().getDate() ){\n        //     dateInCountry = `${date.toDateString()} ${Math.abs(hourWithDiff)}:${date.getMinutes()}:${date.getSeconds()}`; \n        // } else { \n        //     dateInCountry = `${calculateCurrentLocalDate().toDateString()} ${calculateCurrentLocalDate().getHours()}:${date.getMinutes()}:${date.getSeconds()}`;  \n        // }\n\n        let dateInCountry = `${calculateCurrentLocalDate().toDateString()} ${calculateCurrentLocalDate().getHours()}:${date.getMinutes()}:${date.getSeconds()}`;  \n\n\n        //let dateInCountry = `${date.toDateString()} ${Math.abs(hourWithDiff)}:${date.getMinutes()}:${date.getSeconds()}`; \n        //console.log(dateInCountry); \n        //console.log(endtime); \n\n        const total = Date.parse(endtime) - Date.parse(dateInCountry);\n        const seconds = Math.floor( (total/1000) % 60 );\n        const minutes = Math.floor( (total/1000/60) % 60 );\n        const hours = Math.floor( (total/(1000*60*60)) % 24 );\n        const days = Math.floor( total/(1000*60*60*24) );\n\n        return [days,checkSingleDigit(hours),checkSingleDigit(minutes),checkSingleDigit(seconds)]; \n    }\n\n    const calculateUntilClose = () => {\n\n        let endtime = ''; \n\n       \n\n        //dublication \n        const month = new Date().getUTCMonth(); \n        const day = new Date().getUTCDate();\n        const year = new Date().getUTCFullYear();\n\n       \n        \n\n        if(checkVal(openHoursTwo)){ \n            if(opHoursTwo){        \n                let hTo = `${openHoursTwo.split('-')[1].slice(0,2)}`;\n                endtime = new Date(year, month, day, hTo.slice(0,2), 0, 0, 0); \n                const [ds, hs, ms, ss] = calculateRemainingTime(endtime); \n                return `${hs}:${ms}:${ss}`; \n            } else {\n                endtime = new Date(year, month, day, openHoursOne.split('-')[1].slice(0,2), openHoursOne.split('-')[1].slice(3,5), 0);\n                const [ds, hs, ms, ss] = calculateRemainingTime(endtime); \n                return `${hs}:${ms}:${ss}`; \n            }\n\n\n        } else { \n            endtime = new Date(year, month, day, openHoursOne.split('-')[1].slice(0,2), openHoursOne.split('-')[1].slice(3,5), 0); \n            const [ds, hs, ms, ss] = calculateRemainingTime(endtime); \n            return `${hs}:${ms}:${ss}`; \n            \n\n        }\n\n    }\n    \n\n    const calculateUntilOpen = () => {\n\n        let endtime = new Date(); \n        \n\n\n        //dublicates \n        const month = endtime.getUTCMonth(); \n        const day = endtime.getUTCDate();\n        const year = endtime.getUTCFullYear();\n        let hFrom = `${openHoursOne.split('-')[0]}`;\n\n        const seconds = Math.floor( (endtime/1000) % 60 );\n        const minutes = Math.floor( (endtime/1000/60) % 60 );\n        const hours = Math.floor( (endtime/(1000*60*60)) % 24 );\n        const days = Math.floor( endtime/(1000*60*60*24) );\n\n        endtime = new Date(year, month, day, hFrom.slice(0,2), 0, 0, 0); \n\n        \n\n        //on Friday when it's closed already, we add + 2 days to get to Monday (get endtime)\n        if(hoursClosedFriday){\n            const numberOfDaysToAdd = 3;\n            endtime.setDate(endtime.getDate() + numberOfDaysToAdd); \n        } else if (endtime.getDay() == 6){ //check if Saturday \n            const numberOfDaysToAdd = 2;\n            endtime.setDate(endtime.getDate() + numberOfDaysToAdd); \n        } else if(endtime.getDay() == 0) { \n            const numberOfDaysToAdd = 1;\n            endtime.setDate(endtime.getDate() + numberOfDaysToAdd); \n        } else {\n            endtime.setDate(endtime.getDate()); \n        }\n\n        endtime = `${endtime.toDateString()} ${Number(openHoursOne.split('-')[0].slice(0,2))}${openHoursOne.split('-')[0].slice(2,5)}:00`;        \n\n        const [ds, hs, ms, ss] = calculateRemainingTime(endtime); \n\n        //avoid -1 day \n        if(ds === -1){\n            let endtim = new Date(); \n            const day = endtim.getUTCDate()+1;\n            endtim = new Date(year, month, day, hFrom.slice(0,2), 0, 0, 0); \n            endtim = `${endtim.toDateString()} ${Number(openHoursOne.split('-')[0].slice(0,2))}${openHoursOne.split('-')[0].slice(2,5)}:00`; \n            const [ds, hs, ms, ss] = calculateRemainingTime(endtim); \n            return `${ds}d ${hs}:${ms}:${ss}`;\n\n        }\n        \n\n        return `${ds}d ${hs}:${ms}:${ss}`; \n\n\n    }\n\n    const calculateInBreak = () => {\n\n        if(checkVal(openHoursTwo)){\n            const timeNow = calculateCurrentLocalDate(); \n            let hoursOneTo = calculateLocalTime(openHoursOne)['hoursTo']; \n            let hoursTwoFrom = calculateLocalTime(openHoursTwo)['hoursFrom']; \n            let timeString = `${timeNow.getHours()}:${timeNow.getMinutes()}`; \n            \n            let buttonStatus = ''; \n    \n            buttonStatus = timeString < `${hoursTwoFrom}:00` && timeString > `${hoursOneTo}:00` \n            ? true : false; \n    \n            return buttonStatus; \n        }\n\n        return 0; \n\n        \n    }\n\n    const calculateUntilReopen = () => {\n\n \n        //get timeNow and endTime \n        const timeNow = calculateCurrentLocalDate();\n        let hoursTwoFrom = calculateLocalTime(openHoursTwo)['hoursFrom']; \n       \n        //create proper date objects for difference \n        const month = timeNow.getUTCMonth() + 1; \n        const day = timeNow.getUTCDate();\n        const year = timeNow.getUTCFullYear();\n\n\n        let hoursOneTo = new Date(year, month, day, hoursTwoFrom, 0, 0, 0); \n        let diff = hoursOneTo - timeNow; \n\n        //dublicate\n        const seconds = Math.floor( (diff/1000) % 60 );\n        const minutes = Math.floor( (diff/1000/60) % 60 );\n        const hours = Math.floor( (diff/(1000*60*60)) % 24 );\n\n        return `${checkSingleDigit(hours)}:${checkSingleDigit(minutes)}:${checkSingleDigit(seconds)}`; \n\n    }\n\n  \n\n    const handleOpenButton = () => {\n\n\n        //get current local time\n        let currentLocalTime = calculateCurrentLocalDate(); \n        //console.log(currentLocalTime); \n\n        let formattedDate = formatDate(currentLocalTime); \n        \n        //const timeNow = new Date(); \n        \n        \n        let startTime = openHoursOne.split('-')[0]; \n        let endTime = openHoursOne.split('-')[1]; \n\n        let startTimeTwo, endTimeTwo, startTimeObjTwo, endTimeObjTwo; \n\n        if(checkVal(openHoursTwo)){\n            startTimeTwo = openHoursTwo.split('-')[0]; \n            endTimeTwo = openHoursTwo.split('-')[1];\n            startTimeObjTwo = new Date(`${formattedDate} ${startTimeTwo}`); \n            endTimeObjTwo = new Date(`${formattedDate} ${endTimeTwo}`);\n        }\n        \n\n\n        let startTimeObj = new Date(`${formattedDate} ${startTime}`); \n        let endTimeObj = new Date(`${formattedDate} ${endTime}`);\n       \n\n        let open = ''; \n\n        //check if it's Saturday or Sunday \n        if(currentLocalTime.getDay() == 6 || currentLocalTime.getDay() == 0){\n            open = (<div className=\"oval red\">Closed</div>); \n            \n\n        } else {\n            \n            //check if openHoursTwo!=undefined => we have time with the break \n            //otherwise we have only open and close\n            if(checkVal(openHoursTwo)){\n                if(currentLocalTime < endTimeObj && currentLocalTime > startTimeObj){\n                    open = (<div className=\"oval green\">Open</div>); \n                    opHoursOne = true; \n                } else if(currentLocalTime > endTimeObj && currentLocalTime < startTimeObjTwo){\n                    opHoursOne = false; \n                    breakStatus = true; \n                    open = (<div className=\"oval yellow\">Break</div>); \n                } else if(currentLocalTime > startTimeObjTwo && currentLocalTime < endTimeObjTwo){\n                    breakStatus = false;\n                    opHoursTwo = true; \n                    open = (<div className=\"oval green\">Open</div>); \n   \n                } else {       \n                    open = (<div className=\"oval red\">Closed</div>) \n                }\n            } else {\n                if(currentLocalTime < endTimeObj && currentLocalTime > startTimeObj ){\n                    open = (<div className=\"oval green\">Open</div>); \n                    opHoursOne = true; \n                } else {\n                    open = (<div className=\"oval red\">Closed</div>); \n                }\n            }\n\n        }\n            \n         \n        return open;  \n    }\n    const checkVal = val => {\n        if((val === 'undefined') || (!val || val.length === 0)){\n            return false; \n        }\n        return true; \n        \n    }\n\n\n     \n    useEffect(() => {\n        //console.log('CITYNAME', cityName); \n        const interval = setInterval(() => {\n            clockHandler();\n            setTime(Date.now())    \n        }, 1000); \n       \n        return () => {\n            clearInterval(interval);\n        };\n    \n        \n    }, [time]); \n\n\n    // console.log(opHoursOne)\n    // console.log(opHoursTwo)\n\n    \n\n    return (\n        <div className=\"mainContainer\">\n            <div className=\"top\">\n                <div className=\"mainFont\">{cityName}</div>\n                <div className=\"secondaryFont\">{regionName.toUpperCase()}</div>\n                <div className=\"mainFont\">{dayTimeStr}</div>\n            </div>\n\n            <div className=\"middle\">\n                <div className=\"clock\">\n                    <div className=\"hand hour\" \n                        style={{transform: `translate(-50%) rotate(${clockState.hourRate * 360}deg)`}}>\n                    </div>\n                    <div className=\"hand minute\"\n                        style={{transform: `translate(-50%) rotate(${clockState.minuteRate * 360}deg)`}}>\n                    </div>\n                    <div className=\"hand second\"\n                        style={{transform: `translate(-50%) rotate(${clockState.secondRate * 360}deg)`}}>\n                    </div>\n\n                    <div className=\"number number1\">\n                        <div>1</div>\n                    </div>\n\n                    <div className=\"number number2\">\n                        <div>2</div>\n                    </div>\n\n                    <div className=\"number number3\">\n                        <div>3</div>\n                    </div>\n\n                    <div className=\"number number4\">\n                        <div>4</div>\n                    </div>\n\n                    <div className=\"number number5\">\n                        <div>5</div>\n                    </div>\n\n                    <div className=\"number number6\">\n                        <div>6</div>\n                    </div>\n\n                    <div className=\"number number7\">\n                        <div>7</div>\n                    </div>\n\n                    <div className=\"number number8\">\n                        <div>8</div>\n                    </div>\n\n                    <div className=\"number number9\">\n                        <div>9</div>\n                    </div>\n\n                    <div className=\"number number10\">\n                        <div>10</div>\n                    </div>\n\n                    <div className=\"number number11\">\n                        <div>11</div>\n                    </div>\n\n                    <div className=\"number number12\">\n                        <div>12</div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"bottom\">\n                <div>\n\n                    {handleOpenButton()}\n\n                </div>\n                <div className=\"addInfo\">\n                    {/* {breakStatus ? <div>{calculateUntilReopen()} until re-open</div> : null} */}\n                    \n                    <div>{ (opHoursOne || opHoursTwo) ? (`${calculateUntilClose()} until close`) : (breakStatus ? (`${calculateUntilReopen()} until re-open`) : (`${calculateUntilOpen()} until open` )) }</div>\n                </div>\n\n                <div ref={ref}>\n                    \n                    <div className=\"oval2\" onClick={handleClick}>Show Open/Close Hours</div>\n\n                    <Overlay show={show} target={target} placement=\"top\" containerPadding={20}>\n                        <Popover id=\"popover-contained\">\n                            <Popover.Content>\n\n                                <div class=\"contentBox\">\n                                    <div class=\"shedule\">\n                                        <div>{cityName.toUpperCase()} TIME</div>\n                                        <div>{openHoursOne}</div>\n                                        {( typeof openHoursTwo != 'undefined') && (<div>{openHoursTwo}</div>)}\n                                    </div>\n                                    <div class=\"shedule\">\n                                        <div>LOCAL TIME</div>\n                                        <div>{`${checkSingleDigit(calculateLocalTime(openHoursOne)['hoursFrom'])}:${openHoursOne.split('-')[0].slice(3,5)} - ${checkSingleDigit(calculateLocalTime(openHoursOne)['hoursTo'])}:${openHoursOne.split('-')[1].slice(3,5)}`}</div>\n                                        { checkVal(openHoursTwo) ?  \n                                        (<div>{`${checkSingleDigit(calculateLocalTime(openHoursTwo)['hoursFrom'])}:${openHoursTwo.split('-')[0].slice(3,5)} - ${checkSingleDigit(calculateLocalTime(openHoursTwo)['hoursTo'])}:${openHoursTwo.split('-')[1].slice(3,5)}`}</div>):null}\n                                    </div>  \n                                </div>\n                                \n                            </Popover.Content>\n                        </Popover>\n                    </Overlay>\n                </div>               \n            </div>            \n        </div>\n    )\n}\n\nexport default Clock; \n","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/adminPanel/AdminPanel.js",["87","88"],"import React, { useEffect, useState } from 'react'; \n\n\nimport ContinentDropdown from '../continentDropdown/ContinentDropdown'; \nimport GeoSelector from '../geoSelector/GeoSelector';\nimport TimeSelector from '../timeSelector/TimeSelector'; \nimport * as Constants from '../../constants'; \nimport * as styles from './AdminPanel.module.scss'; \n\nconst AdminPanel = () => {\n\n    //const initialFormData = { continent: '', country: '', city: '', timeSlotOne: {from: '', to: ''}, timeSlotTwo: {from: '', to: ''}}; \n    const [ formData, setFormData ] = useState({ continent: '', country: '', city: '', utcoffset: ''}); \n    const [ timeSlotOne, setTimeSlotOne ] = useState({ from: '', to: ''}); \n    const [ timeSlotTwo, setTimeSlotTwo ] = useState({ from: '', to: ''}); \n\n    \n\n    const postData = async(url) => {\n\n        const info = {\n                    \"id\": `${Math.floor(Math.random() * 1000001)}`, \n                    \"continent\": formData.continent, \n                    \"country\": formData.country,\n                    \"city\": formData.city, \n                    \"utcoffset\": `${formData.utcoffset*60}`,\n                    \"openHoursOne\": `${timeSlotOne.from}-${timeSlotOne.to}`,\n                    \"openHoursTwo\": `${timeSlotTwo.from}-${timeSlotTwo.to}`\n                }\n\n        // const bod = {\n        //     \"id\":\"56100\", \n        //     \"continent\": \"Europe\", \n        //     \"country\": \"Ukraine\",\n        //     \"city\": \"\", \n        //     \"utcoffset\":\"+180\",\n        //     \"openHoursOne\": \"15:00-17:00\",\n        //     \"openHoursTwo\": \"\"\n        // }; \n\n        // const response = await fetch(url, {\n        //     method: 'POST',\n        //     mode: 'cors',  \n        //     headers: { 'Content-Type': 'application/json' }, \n        //     body: JSON.stringify(info) \n        // }); \n\n        // return response.json(); \n\n    }\n\n    const handlePost = () => {\n        postData(Constants.POST_URL).then(data => console.log(data)); \n    }\n\n\n\n\n\n    return (\n        <div className={styles.mainContainer}>\n            <div className={styles.contentBox}>\n\n                <ContinentDropdown continent={selectedContinent => setFormData({...formData, continent: selectedContinent})}/>\n                \n                <div className={styles.input}>\n                    <div className={styles.input}>Choose country and region</div>\n                    <GeoSelector \n                        geo={selectedGeo => setFormData({...formData, country: selectedGeo[0], city: selectedGeo[1]})}/>\n                </div>\n\n                <div className={styles.input}>\n                    <div className={styles.input}>If there is more than one slot, input one more time slot of opening hours</div>\n                    <TimeSelector\n                        timeSlotOne={selectedTimeSlotOne => setTimeSlotOne({ ...timeSlotOne, from: selectedTimeSlotOne[0], to: selectedTimeSlotOne[1]})}\n                        timeSlotTwo={selectedTimeSlotTwo => setTimeSlotTwo({ ...timeSlotTwo, from: selectedTimeSlotTwo[0], to: selectedTimeSlotTwo[1]})}/>\n                </div>\n\n                <div className={styles.input}>\n                    <div>Enter UTC offcet (consider inputing with (+/-) value)</div>\n                    <input type=\"text\" placeholder=\"UTC offset\" onChange={e => setFormData({...formData, utcoffset: e.target.value })}/>\n                </div>\n\n                <div className={styles.submitBox}>\n                    <button className={styles.submitBtn} onClick={handlePost}>Submit</button>\n                </div>\n                \n            </div> \n        </div>\n    )\n}\n\nexport default AdminPanel; \n","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js",["89"],"import React, { useState } from 'react'; \nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n\nconst GeoSelector = ({ geo }) => {\n\n    const [ geoCountry, setGeoCountry ] = useState(''); \n    const [ geoCity, setGeoCity ] = useState(''); \n\n\n\n    const selectCountry = (val) => {\n        setGeoCountry(geoCountry => val); \n    }\n\n    const selectRegion = (val) => {\n        setGeoCity(geoCity => val);\n        geo([geoCountry, val]); \n    }\n\n\n   \n\n    return (\n        <div>\n\n            <CountryDropdown \n                value={geoCountry}\n                onChange={val => selectCountry(val)}\n                //onChange={(e) => selectCountry(e)}\n\n                style={{ color: 'grey', fontSize: '17px', height: '40px'}}\n                >{geoCountry}</CountryDropdown>\n\n            <RegionDropdown \n                country={geoCountry}\n                value={geoCity}\n                //onChange={(e) => selectRegion(e)}\n                onChange={val => selectRegion(val)}\n\n                style={{ color: 'grey', fontSize: '17px', height: '40px', boxShadow: 'grey'}}\n                blankOptionLabel=\"No country selected\"\n                defaultOptionLabel=\"Now select a region\"\n                >{geoCity}</RegionDropdown>   \n\n \n        </div>\n    )\n}\n\nexport default GeoSelector; \n","/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/timeSelector/timeSelector.js",[],"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/timeSelector/TimeSelector.js",[],"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/footer/Footer.js",[],"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/continentDropdown/ContinentDropdown.js",[],"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/constants.js",[],{"ruleId":"90","severity":1,"message":"91","line":3,"column":13,"nodeType":"92","messageId":"93","endLine":3,"endColumn":19},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"90","severity":1,"message":"98","line":8,"column":8,"nodeType":"92","messageId":"93","endLine":8,"endColumn":16},{"ruleId":"90","severity":1,"message":"99","line":72,"column":7,"nodeType":"92","messageId":"93","endLine":72,"endColumn":10},{"ruleId":"90","severity":1,"message":"100","line":114,"column":7,"nodeType":"92","messageId":"93","endLine":114,"endColumn":16},{"ruleId":"90","severity":1,"message":"101","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"102","line":14,"column":24,"nodeType":"92","messageId":"93","endLine":14,"endColumn":36},{"ruleId":"103","severity":1,"message":"104","line":64,"column":35,"nodeType":"105","messageId":"106","endLine":64,"endColumn":37},{"ruleId":"103","severity":1,"message":"104","line":66,"column":35,"nodeType":"105","messageId":"106","endLine":66,"endColumn":37},{"ruleId":"107","severity":1,"message":"108","line":11,"column":18,"nodeType":"109","messageId":"110","endLine":11,"endColumn":26,"fix":"111"},{"ruleId":"90","severity":1,"message":"112","line":25,"column":32,"nodeType":"92","messageId":"93","endLine":25,"endColumn":52},{"ruleId":"90","severity":1,"message":"113","line":26,"column":13,"nodeType":"92","messageId":"93","endLine":26,"endColumn":22},{"ruleId":"90","severity":1,"message":"114","line":26,"column":24,"nodeType":"92","messageId":"93","endLine":26,"endColumn":36},{"ruleId":"107","severity":1,"message":"108","line":45,"column":20,"nodeType":"109","messageId":"110","endLine":45,"endColumn":28,"fix":"115"},{"ruleId":"103","severity":1,"message":"104","line":87,"column":36,"nodeType":"105","messageId":"106","endLine":87,"endColumn":38},{"ruleId":"90","severity":1,"message":"116","line":162,"column":13,"nodeType":"92","messageId":"93","endLine":162,"endColumn":25},{"ruleId":"90","severity":1,"message":"117","line":208,"column":24,"nodeType":"92","messageId":"93","endLine":208,"endColumn":26},{"ruleId":"90","severity":1,"message":"117","line":212,"column":24,"nodeType":"92","messageId":"93","endLine":212,"endColumn":26},{"ruleId":"90","severity":1,"message":"117","line":219,"column":20,"nodeType":"92","messageId":"93","endLine":219,"endColumn":22},{"ruleId":"90","severity":1,"message":"118","line":240,"column":15,"nodeType":"92","messageId":"93","endLine":240,"endColumn":22},{"ruleId":"90","severity":1,"message":"119","line":241,"column":15,"nodeType":"92","messageId":"93","endLine":241,"endColumn":22},{"ruleId":"90","severity":1,"message":"120","line":242,"column":15,"nodeType":"92","messageId":"93","endLine":242,"endColumn":20},{"ruleId":"90","severity":1,"message":"121","line":243,"column":15,"nodeType":"92","messageId":"93","endLine":243,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":253,"column":37,"nodeType":"105","messageId":"106","endLine":253,"endColumn":39},{"ruleId":"103","severity":1,"message":"104","line":256,"column":36,"nodeType":"105","messageId":"106","endLine":256,"endColumn":38},{"ruleId":"90","severity":1,"message":"122","line":284,"column":11,"nodeType":"92","messageId":"93","endLine":284,"endColumn":27},{"ruleId":"103","severity":1,"message":"104","line":365,"column":38,"nodeType":"105","messageId":"106","endLine":365,"endColumn":40},{"ruleId":"103","severity":1,"message":"104","line":365,"column":72,"nodeType":"105","messageId":"106","endLine":365,"endColumn":74},{"ruleId":"123","severity":1,"message":"124","line":425,"column":8,"nodeType":"125","endLine":425,"endColumn":14,"suggestions":"126"},{"ruleId":"90","severity":1,"message":"101","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"127","line":21,"column":15,"nodeType":"92","messageId":"93","endLine":21,"endColumn":19},{"ruleId":"90","severity":1,"message":"128","line":2,"column":43,"nodeType":"92","messageId":"93","endLine":2,"endColumn":60},"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","no-native-reassign",["129"],"no-negated-in-lhs",["130"],"'Orbitals' is defined but never used.","'arr' is assigned a value but never used.","'regionBox' is assigned a value but never used.","'useEffect' is defined but never used.","'setIsLoading' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"131","text":"132"},"'setHoursClosedFriday' is assigned a value but never used.","'hoursOpen' is assigned a value but never used.","'setHoursOpen' is assigned a value but never used.",{"range":"133","text":"132"},"'hourWithDiff' is assigned a value but never used.","'ds' is assigned a value but never used.","'seconds' is assigned a value but never used.","'minutes' is assigned a value but never used.","'hours' is assigned a value but never used.","'days' is assigned a value but never used.","'calculateInBreak' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'clockHandler'. Either include it or remove the dependency array.","ArrayExpression",["134"],"'info' is assigned a value but never used.","'CountryRegionData' is defined but never used.","no-global-assign","no-unsafe-negation",[298,298],"()",[1271,1271],{"desc":"135","fix":"136"},"Update the dependencies array to be: [clockHandler, time]",{"range":"137","text":"138"},[13398,13404],"[clockHandler, time]"]