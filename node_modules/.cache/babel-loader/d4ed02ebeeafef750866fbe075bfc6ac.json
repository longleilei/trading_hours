{"ast":null,"code":"var _jsxFileName = \"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GeoSelector = ({\n  geo\n}) => {\n  _s();\n\n  //const initialGeoState = {  count: '', region: '' }; \n  const [geoCountry, setGeoCountry] = useState('');\n  const [geoCity, setGeoCity] = useState('');\n\n  const selectCountry = val => {\n    //count(e.target.value); \n    setGeoCountry(geoCountry => val);\n  };\n\n  const selectRegion = val => {\n    //cit(e.target.value); \n    setGeoCity({ ...setGeoState,\n      region: val\n    });\n    let geoArr = [geoState['count'], geoState['region']];\n    console.log('GEOSTATE', geoState);\n    console.log('GEOARRAY' + geoArr); //geo()\n  };\n\n  console.log(geoState);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CountryDropdown, {\n      value: geoState.country,\n      onChange: val => selectCountry(val) //onChange={(e) => selectCountry(e)}\n      ,\n      style: {\n        color: 'grey',\n        fontSize: '17px',\n        height: '40px'\n      },\n      children: geoState.country\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RegionDropdown, {\n      country: geoState.country,\n      value: geoState.region //onChange={(e) => selectRegion(e)}\n      ,\n      onChange: val => selectRegion(val),\n      style: {\n        color: 'grey',\n        fontSize: '17px',\n        height: '40px',\n        boxShadow: 'grey'\n      },\n      blankOptionLabel: \"No country selected\",\n      defaultOptionLabel: \"Now select a region\",\n      children: geoState.state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GeoSelector, \"k2Cpo76ARQWzh7rFcML3tn+UTtQ=\");\n\n_c = GeoSelector;\nexport default GeoSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoSelector\");","map":{"version":3,"sources":["/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js"],"names":["React","useState","CountryDropdown","RegionDropdown","CountryRegionData","GeoSelector","geo","geoCountry","setGeoCountry","geoCity","setGeoCity","selectCountry","val","selectRegion","setGeoState","region","geoArr","geoState","console","log","country","color","fontSize","height","boxShadow","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,QAAmE,+BAAnE;;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAAA;;AAE7B;AAEA,QAAM,CAAEC,UAAF,EAAcC,aAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAEQ,OAAF,EAAWC,UAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;;AAIA,QAAMU,aAAa,GAAIC,GAAD,IAAS;AAC3B;AACAJ,IAAAA,aAAa,CAACD,UAAU,IAAIK,GAAf,CAAb;AACH,GAHD;;AAKA,QAAMC,YAAY,GAAID,GAAD,IAAS;AAC1B;AACAF,IAAAA,UAAU,CAAC,EAAC,GAAGI,WAAJ;AAAiBC,MAAAA,MAAM,EAAEH;AAAzB,KAAD,CAAV;AACA,QAAII,MAAM,GAAG,CAACC,QAAQ,CAAC,OAAD,CAAT,EAAoBA,QAAQ,CAAC,QAAD,CAA5B,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBF,QAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaH,MAAzB,EAL0B,CAM1B;AACH,GAPD;;AAUAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAGA,sBACI;AAAA,4BAEI,QAAC,eAAD;AACI,MAAA,KAAK,EAAEA,QAAQ,CAACG,OADpB;AAEI,MAAA,QAAQ,EAAER,GAAG,IAAID,aAAa,CAACC,GAAD,CAFlC,CAGI;AAHJ;AAKI,MAAA,KAAK,EAAE;AAAES,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,QAAQ,EAAE,MAA3B;AAAmCC,QAAAA,MAAM,EAAE;AAA3C,OALX;AAAA,gBAMMN,QAAQ,CAACG;AANf;AAAA;AAAA;AAAA;AAAA,YAFJ,eAUI,QAAC,cAAD;AACI,MAAA,OAAO,EAAEH,QAAQ,CAACG,OADtB;AAEI,MAAA,KAAK,EAAEH,QAAQ,CAACF,MAFpB,CAGI;AAHJ;AAII,MAAA,QAAQ,EAAEH,GAAG,IAAIC,YAAY,CAACD,GAAD,CAJjC;AAMI,MAAA,KAAK,EAAE;AAAES,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,QAAQ,EAAE,MAA3B;AAAmCC,QAAAA,MAAM,EAAE,MAA3C;AAAmDC,QAAAA,SAAS,EAAE;AAA9D,OANX;AAOI,MAAA,gBAAgB,EAAC,qBAPrB;AAQI,MAAA,kBAAkB,EAAC,qBARvB;AAAA,gBASMP,QAAQ,CAACQ;AATf;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CApDD;;GAAMpB,W;;KAAAA,W;AAsDN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react'; \nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n\nconst GeoSelector = ({ geo }) => {\n\n    //const initialGeoState = {  count: '', region: '' }; \n\n    const [ geoCountry, setGeoCountry ] = useState(''); \n    const [ geoCity, setGeoCity ] = useState(''); \n\n\n\n    const selectCountry = (val) => {\n        //count(e.target.value); \n        setGeoCountry(geoCountry => val); \n    }\n\n    const selectRegion = (val) => {\n        //cit(e.target.value); \n        setGeoCity({...setGeoState, region: val}); \n        let geoArr = [geoState['count'], geoState['region']]; \n        console.log('GEOSTATE',geoState); \n        console.log('GEOARRAY' + geoArr); \n        //geo()\n    }\n\n\n    console.log(geoState); \n   \n\n    return (\n        <div>\n\n            <CountryDropdown \n                value={geoState.country}\n                onChange={val => selectCountry(val)}\n                //onChange={(e) => selectCountry(e)}\n\n                style={{ color: 'grey', fontSize: '17px', height: '40px'}}\n                >{geoState.country}</CountryDropdown>\n\n            <RegionDropdown \n                country={geoState.country}\n                value={geoState.region}\n                //onChange={(e) => selectRegion(e)}\n                onChange={val => selectRegion(val)}\n\n                style={{ color: 'grey', fontSize: '17px', height: '40px', boxShadow: 'grey'}}\n                blankOptionLabel=\"No country selected\"\n                defaultOptionLabel=\"Now select a region\"\n                >{geoState.state}</RegionDropdown>   \n\n \n        </div>\n    )\n}\n\nexport default GeoSelector; \n"]},"metadata":{},"sourceType":"module"}