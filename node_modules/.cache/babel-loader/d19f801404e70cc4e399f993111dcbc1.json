{"ast":null,"code":"import _objectSpread from\"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useReducer}from'react';import{CountryDropdown,RegionDropdown,CountryRegionData}from'react-country-region-selector';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var GeoSelector=function GeoSelector(){var initialGeoState={country:'',region:''};var _useState=useState(initialGeoState),_useState2=_slicedToArray(_useState,2),geoState=_useState2[0],setGeoState=_useState2[1];var selectCountry=function selectCountry(val){setGeoState(_objectSpread(_objectSpread({},setGeoState),{},{country:val}));};var selectRegion=function selectRegion(val){setGeoState(_objectSpread(_objectSpread({},setGeoState),{},{geoState:val}));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(CountryDropdown,{value:geoState.country,style:{color:'grey',fontSize:'20px'},onChange:function onChange(value){return selectCountry(value);},children:geoState.country}),/*#__PURE__*/_jsx(RegionDropdown,{country:geoState.country,value:geoState.region,style:{color:'grey',fontSize:'20px'},blankOptionLabel:\"No country selected\",defaultOptionLabel:\"Now select a region\",onChange:function onChange(value){return selectRegion(value);},children:geoState.state})]});};export default GeoSelector;","map":{"version":3,"sources":["/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js"],"names":["React","useState","useReducer","CountryDropdown","RegionDropdown","CountryRegionData","GeoSelector","initialGeoState","country","region","geoState","setGeoState","selectCountry","val","selectRegion","color","fontSize","value","state"],"mappings":"yWAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,KAA4C,OAA5C,CACA,OAASC,eAAT,CAA0BC,cAA1B,CAA0CC,iBAA1C,KAAmE,+BAAnE,C,wFAGA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CAEtB,GAAMC,CAAAA,eAAe,CAAG,CAAGC,OAAO,CAAE,EAAZ,CAAgBC,MAAM,CAAE,EAAxB,CAAxB,CAFsB,cAIYR,QAAQ,CAACM,eAAD,CAJpB,wCAIdG,QAJc,eAIJC,WAJI,eAMtB,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,GAAD,CAAS,CAC3BF,WAAW,gCAAKA,WAAL,MAAkBH,OAAO,CAAEK,GAA3B,GAAX,CACH,CAFD,CAIA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACD,GAAD,CAAS,CAC1BF,WAAW,gCAAKA,WAAL,MAAkBD,QAAQ,CAAEG,GAA5B,GAAX,CACH,CAFD,CAKA,mBACI,oCACI,KAAC,eAAD,EACI,KAAK,CAAEH,QAAQ,CAACF,OADpB,CAEI,KAAK,CAAE,CAAEO,KAAK,CAAE,MAAT,CAAiBC,QAAQ,CAAE,MAA3B,CAFX,CAGI,QAAQ,CAAE,kBAAAC,KAAK,QAAIL,CAAAA,aAAa,CAACK,KAAD,CAAjB,EAHnB,UAKMP,QAAQ,CAACF,OALf,EADJ,cAQI,KAAC,cAAD,EACI,OAAO,CAAEE,QAAQ,CAACF,OADtB,CAEI,KAAK,CAAEE,QAAQ,CAACD,MAFpB,CAGI,KAAK,CAAE,CAAEM,KAAK,CAAE,MAAT,CAAiBC,QAAQ,CAAE,MAA3B,CAHX,CAII,gBAAgB,CAAC,qBAJrB,CAKI,kBAAkB,CAAC,qBALvB,CAMI,QAAQ,CAAE,kBAAAC,KAAK,QAAIH,CAAAA,YAAY,CAACG,KAAD,CAAhB,EANnB,UAOMP,QAAQ,CAACQ,KAPf,EARJ,GADJ,CAmBH,CAlCD,CAoCA,cAAeZ,CAAAA,WAAf","sourcesContent":["import React, { useState, useReducer } from 'react'; \nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n\nconst GeoSelector = () => {\n\n    const initialGeoState = {  country: '', region: '' }; \n\n    const [ geoState, setGeoState ] = useState(initialGeoState); \n\n    const selectCountry = (val) => {\n        setGeoState({...setGeoState, country: val}); \n    }\n\n    const selectRegion = (val) => {\n        setGeoState({...setGeoState, geoState: val}); \n    }\n\n\n    return (\n        <div>\n            <CountryDropdown\n                value={geoState.country}\n                style={{ color: 'grey', fontSize: '20px'}}\n                onChange={value => selectCountry(value)}\n                \n                >{geoState.country}</CountryDropdown>\n\n            <RegionDropdown\n                country={geoState.country}\n                value={geoState.region}\n                style={{ color: 'grey', fontSize: '20px'}}\n                blankOptionLabel=\"No country selected\"\n                defaultOptionLabel=\"Now select a region\"\n                onChange={value => selectRegion(value)}\n                >{geoState.state}</RegionDropdown>   \n        </div>\n    )\n}\n\nexport default GeoSelector; \n"]},"metadata":{},"sourceType":"module"}