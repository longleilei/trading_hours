{"ast":null,"code":"var _jsxFileName = \"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useReducer } from 'react';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GeoSelector = () => {\n  _s();\n\n  const initialGeoState = {\n    country: '',\n    region: ''\n  };\n  const [geoState, setGeoState] = useState(initialGeoState);\n\n  const selectCountry = val => {\n    setGeoState({ ...setGeoState,\n      country: val\n    });\n  };\n\n  const selectRegion = val => {\n    setGeoState({ ...setGeoState,\n      geoState: val\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CountryDropdown, {\n      value: geoState.country,\n      style: {\n        color: 'grey',\n        fontSize: '17px',\n        height: '40px'\n      },\n      onChange: value => selectCountry(value),\n      children: geoState.country\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RegionDropdown, {\n      country: geoState.country,\n      value: geoState.region,\n      style: {\n        color: 'grey',\n        fontSize: '17px',\n        height: '40px',\n        boxShadow: 'grey'\n      },\n      blankOptionLabel: \"No country selected\",\n      defaultOptionLabel: \"Now select a region\",\n      onChange: value => selectRegion(value),\n      children: geoState.state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GeoSelector, \"SayJ3UFwm7fP2MXgpwc1+oNCziI=\");\n\n_c = GeoSelector;\nexport default GeoSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoSelector\");","map":{"version":3,"sources":["/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js"],"names":["React","useState","useReducer","CountryDropdown","RegionDropdown","CountryRegionData","GeoSelector","initialGeoState","country","region","geoState","setGeoState","selectCountry","val","selectRegion","color","fontSize","height","value","boxShadow","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,QAAmE,+BAAnE;;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAEtB,QAAMC,eAAe,GAAG;AAAGC,IAAAA,OAAO,EAAE,EAAZ;AAAgBC,IAAAA,MAAM,EAAE;AAAxB,GAAxB;AAEA,QAAM,CAAEC,QAAF,EAAYC,WAAZ,IAA4BV,QAAQ,CAACM,eAAD,CAA1C;;AAEA,QAAMK,aAAa,GAAIC,GAAD,IAAS;AAC3BF,IAAAA,WAAW,CAAC,EAAC,GAAGA,WAAJ;AAAiBH,MAAAA,OAAO,EAAEK;AAA1B,KAAD,CAAX;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAID,GAAD,IAAS;AAC1BF,IAAAA,WAAW,CAAC,EAAC,GAAGA,WAAJ;AAAiBD,MAAAA,QAAQ,EAAEG;AAA3B,KAAD,CAAX;AACH,GAFD;;AAOA,sBACI;AAAA,4BACI,QAAC,eAAD;AACI,MAAA,KAAK,EAAEH,QAAQ,CAACF,OADpB;AAEI,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,QAAQ,EAAE,MAA3B;AAAmCC,QAAAA,MAAM,EAAE;AAA3C,OAFX;AAGI,MAAA,QAAQ,EAAEC,KAAK,IAAIN,aAAa,CAACM,KAAD,CAHpC;AAAA,gBAIMR,QAAQ,CAACF;AAJf;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI,QAAC,cAAD;AACI,MAAA,OAAO,EAAEE,QAAQ,CAACF,OADtB;AAEI,MAAA,KAAK,EAAEE,QAAQ,CAACD,MAFpB;AAGI,MAAA,KAAK,EAAE;AAAEM,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,QAAQ,EAAE,MAA3B;AAAmCC,QAAAA,MAAM,EAAE,MAA3C;AAAmDE,QAAAA,SAAS,EAAE;AAA9D,OAHX;AAII,MAAA,gBAAgB,EAAC,qBAJrB;AAKI,MAAA,kBAAkB,EAAC,qBALvB;AAMI,MAAA,QAAQ,EAAED,KAAK,IAAIJ,YAAY,CAACI,KAAD,CANnC;AAAA,gBAOMR,QAAQ,CAACU;AAPf;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CAnCD;;GAAMd,W;;KAAAA,W;AAqCN,eAAeA,WAAf","sourcesContent":["import React, { useState, useReducer } from 'react'; \nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n\nconst GeoSelector = () => {\n\n    const initialGeoState = {  country: '', region: '' }; \n\n    const [ geoState, setGeoState ] = useState(initialGeoState); \n\n    const selectCountry = (val) => {\n        setGeoState({...setGeoState, country: val}); \n    }\n\n    const selectRegion = (val) => {\n        setGeoState({...setGeoState, geoState: val}); \n    }\n\n\n   \n\n    return (\n        <div>\n            <CountryDropdown\n                value={geoState.country}\n                style={{ color: 'grey', fontSize: '17px', height: '40px'}}\n                onChange={value => selectCountry(value)}\n                >{geoState.country}</CountryDropdown>\n\n            <RegionDropdown\n                country={geoState.country}\n                value={geoState.region}\n                style={{ color: 'grey', fontSize: '17px', height: '40px', boxShadow: 'grey'}}\n                blankOptionLabel=\"No country selected\"\n                defaultOptionLabel=\"Now select a region\"\n                onChange={value => selectRegion(value)}\n                >{geoState.state}</RegionDropdown>   \n        </div>\n    )\n}\n\nexport default GeoSelector; \n"]},"metadata":{},"sourceType":"module"}