{"ast":null,"code":"var _jsxFileName = \"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GeoSelector = ({\n  count,\n  cit\n}) => {\n  _s();\n\n  const initialGeoState = {\n    count: '',\n    region: ''\n  };\n  const [geoState, setGeoState] = useState(initialGeoState);\n\n  const selectCountry = val => {\n    //count(e.target.value); \n    setGeoState({ ...setGeoState,\n      country: val\n    });\n  };\n\n  const selectRegion = e => {\n    cit(e.target.value); //setGeoState({...setGeoState, region: val}); \n  };\n\n  console.log(geoState);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CountryDropdown, {\n      value: geoState.country,\n      onChange: val => selectCountry(val) //onChange={(e) => selectCountry(e)}\n      ,\n      style: {\n        color: 'grey',\n        fontSize: '17px',\n        height: '40px'\n      },\n      children: geoState.country\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RegionDropdown, {\n      country: geoState.country,\n      value: geoState.region,\n      onChange: e => selectRegion(e) //onChange={val => selectRegion(val)}\n      ,\n      style: {\n        color: 'grey',\n        fontSize: '17px',\n        height: '40px',\n        boxShadow: 'grey'\n      },\n      blankOptionLabel: \"No country selected\",\n      defaultOptionLabel: \"Now select a region\",\n      children: geoState.state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GeoSelector, \"SayJ3UFwm7fP2MXgpwc1+oNCziI=\");\n\n_c = GeoSelector;\nexport default GeoSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoSelector\");","map":{"version":3,"sources":["/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js"],"names":["React","useState","CountryDropdown","RegionDropdown","CountryRegionData","GeoSelector","count","cit","initialGeoState","region","geoState","setGeoState","selectCountry","val","country","selectRegion","e","target","value","console","log","color","fontSize","height","boxShadow","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,QAAmE,+BAAnE;;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAoB;AAAA;;AAEpC,QAAMC,eAAe,GAAG;AAAGF,IAAAA,KAAK,EAAE,EAAV;AAAcG,IAAAA,MAAM,EAAE;AAAtB,GAAxB;AAEA,QAAM,CAAEC,QAAF,EAAYC,WAAZ,IAA4BV,QAAQ,CAACO,eAAD,CAA1C;;AAGA,QAAMI,aAAa,GAAIC,GAAD,IAAS;AAC3B;AACAF,IAAAA,WAAW,CAAC,EAAC,GAAGA,WAAJ;AAAiBG,MAAAA,OAAO,EAAED;AAA1B,KAAD,CAAX;AACH,GAHD;;AAKA,QAAME,YAAY,GAAIC,CAAD,IAAO;AACxBT,IAAAA,GAAG,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAAH,CADwB,CAExB;AACH,GAHD;;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AAGA,sBACI;AAAA,4BAEI,QAAC,eAAD;AACI,MAAA,KAAK,EAAEA,QAAQ,CAACI,OADpB;AAEI,MAAA,QAAQ,EAAED,GAAG,IAAID,aAAa,CAACC,GAAD,CAFlC,CAGI;AAHJ;AAKI,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,QAAQ,EAAE,MAA3B;AAAmCC,QAAAA,MAAM,EAAE;AAA3C,OALX;AAAA,gBAMMb,QAAQ,CAACI;AANf;AAAA;AAAA;AAAA;AAAA,YAFJ,eAUI,QAAC,cAAD;AACI,MAAA,OAAO,EAAEJ,QAAQ,CAACI,OADtB;AAEI,MAAA,KAAK,EAAEJ,QAAQ,CAACD,MAFpB;AAGI,MAAA,QAAQ,EAAGO,CAAD,IAAOD,YAAY,CAACC,CAAD,CAHjC,CAII;AAJJ;AAMI,MAAA,KAAK,EAAE;AAAEK,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,QAAQ,EAAE,MAA3B;AAAmCC,QAAAA,MAAM,EAAE,MAA3C;AAAmDC,QAAAA,SAAS,EAAE;AAA9D,OANX;AAOI,MAAA,gBAAgB,EAAC,qBAPrB;AAQI,MAAA,kBAAkB,EAAC,qBARvB;AAAA,gBASMd,QAAQ,CAACe;AATf;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CA9CD;;GAAMpB,W;;KAAAA,W;AAgDN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react'; \nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n\nconst GeoSelector = ({ count, cit }) => {\n\n    const initialGeoState = {  count: '', region: '' }; \n\n    const [ geoState, setGeoState ] = useState(initialGeoState); \n\n\n    const selectCountry = (val) => {\n        //count(e.target.value); \n        setGeoState({...setGeoState, country: val}); \n    }\n\n    const selectRegion = (e) => {\n        cit(e.target.value); \n        //setGeoState({...setGeoState, region: val}); \n    }\n\n\n    console.log(geoState); \n   \n\n    return (\n        <div>\n\n            <CountryDropdown \n                value={geoState.country}\n                onChange={val => selectCountry(val)}\n                //onChange={(e) => selectCountry(e)}\n\n                style={{ color: 'grey', fontSize: '17px', height: '40px'}}\n                >{geoState.country}</CountryDropdown>\n\n            <RegionDropdown \n                country={geoState.country}\n                value={geoState.region}\n                onChange={(e) => selectRegion(e)}\n                //onChange={val => selectRegion(val)}\n\n                style={{ color: 'grey', fontSize: '17px', height: '40px', boxShadow: 'grey'}}\n                blankOptionLabel=\"No country selected\"\n                defaultOptionLabel=\"Now select a region\"\n                >{geoState.state}</RegionDropdown>   \n\n \n        </div>\n    )\n}\n\nexport default GeoSelector; \n"]},"metadata":{},"sourceType":"module"}