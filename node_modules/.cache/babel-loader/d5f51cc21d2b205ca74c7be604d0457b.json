{"ast":null,"code":"var _jsxFileName = \"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GeoSelector = ({\n  geo\n}) => {\n  _s();\n\n  //const initialGeoState = {  count: '', region: '' }; \n  const [geoCountry, setGeoCountry] = useState('');\n  const [geoCity, setGeoCity] = useState('');\n\n  const selectCountry = val => {\n    //count(e.target.value); \n    setGeoCountry(geoCountry => val);\n  };\n\n  const selectRegion = val => {\n    //cit(e.target.value); \n    setGeoCity(geoCity => val);\n    let geoArr = [geoCountry, val]; //console.log('GEOSTATE',geoState); \n    //console.log('GEOARRAY' + geoArr); \n\n    geo([geoCountry, val]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CountryDropdown, {\n      value: geoCountry,\n      onChange: val => selectCountry(val) //onChange={(e) => selectCountry(e)}\n      ,\n      style: {\n        color: 'grey',\n        fontSize: '17px',\n        height: '40px'\n      },\n      children: geoCountry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RegionDropdown, {\n      country: geoCountry,\n      value: geoCity //onChange={(e) => selectRegion(e)}\n      ,\n      onChange: val => selectRegion(val),\n      style: {\n        color: 'grey',\n        fontSize: '17px',\n        height: '40px',\n        boxShadow: 'grey'\n      },\n      blankOptionLabel: \"No country selected\",\n      defaultOptionLabel: \"Now select a region\",\n      children: geoCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GeoSelector, \"k2Cpo76ARQWzh7rFcML3tn+UTtQ=\");\n\n_c = GeoSelector;\nexport default GeoSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoSelector\");","map":{"version":3,"sources":["/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js"],"names":["React","useState","CountryDropdown","RegionDropdown","CountryRegionData","GeoSelector","geo","geoCountry","setGeoCountry","geoCity","setGeoCity","selectCountry","val","selectRegion","geoArr","color","fontSize","height","boxShadow"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,QAAmE,+BAAnE;;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAAA;;AAE7B;AAEA,QAAM,CAAEC,UAAF,EAAcC,aAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAEQ,OAAF,EAAWC,UAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;;AAIA,QAAMU,aAAa,GAAIC,GAAD,IAAS;AAC3B;AACAJ,IAAAA,aAAa,CAACD,UAAU,IAAIK,GAAf,CAAb;AACH,GAHD;;AAKA,QAAMC,YAAY,GAAID,GAAD,IAAS;AAC1B;AACAF,IAAAA,UAAU,CAACD,OAAO,IAAIG,GAAZ,CAAV;AACA,QAAIE,MAAM,GAAG,CAACP,UAAD,EAAaK,GAAb,CAAb,CAH0B,CAI1B;AACA;;AACAN,IAAAA,GAAG,CAAC,CAACC,UAAD,EAAaK,GAAb,CAAD,CAAH;AACH,GAPD;;AAYA,sBACI;AAAA,4BAEI,QAAC,eAAD;AACI,MAAA,KAAK,EAAEL,UADX;AAEI,MAAA,QAAQ,EAAEK,GAAG,IAAID,aAAa,CAACC,GAAD,CAFlC,CAGI;AAHJ;AAKI,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,QAAQ,EAAE,MAA3B;AAAmCC,QAAAA,MAAM,EAAE;AAA3C,OALX;AAAA,gBAMMV;AANN;AAAA;AAAA;AAAA;AAAA,YAFJ,eAUI,QAAC,cAAD;AACI,MAAA,OAAO,EAAEA,UADb;AAEI,MAAA,KAAK,EAAEE,OAFX,CAGI;AAHJ;AAII,MAAA,QAAQ,EAAEG,GAAG,IAAIC,YAAY,CAACD,GAAD,CAJjC;AAMI,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,QAAQ,EAAE,MAA3B;AAAmCC,QAAAA,MAAM,EAAE,MAA3C;AAAmDC,QAAAA,SAAS,EAAE;AAA9D,OANX;AAOI,MAAA,gBAAgB,EAAC,qBAPrB;AAQI,MAAA,kBAAkB,EAAC,qBARvB;AAAA,gBASMT;AATN;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CAnDD;;GAAMJ,W;;KAAAA,W;AAqDN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react'; \nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n\nconst GeoSelector = ({ geo }) => {\n\n    //const initialGeoState = {  count: '', region: '' }; \n\n    const [ geoCountry, setGeoCountry ] = useState(''); \n    const [ geoCity, setGeoCity ] = useState(''); \n\n\n\n    const selectCountry = (val) => {\n        //count(e.target.value); \n        setGeoCountry(geoCountry => val); \n    }\n\n    const selectRegion = (val) => {\n        //cit(e.target.value); \n        setGeoCity(geoCity => val); \n        let geoArr = [geoCountry, val]; \n        //console.log('GEOSTATE',geoState); \n        //console.log('GEOARRAY' + geoArr); \n        geo([geoCountry, val]); \n    }\n\n\n   \n\n    return (\n        <div>\n\n            <CountryDropdown \n                value={geoCountry}\n                onChange={val => selectCountry(val)}\n                //onChange={(e) => selectCountry(e)}\n\n                style={{ color: 'grey', fontSize: '17px', height: '40px'}}\n                >{geoCountry}</CountryDropdown>\n\n            <RegionDropdown \n                country={geoCountry}\n                value={geoCity}\n                //onChange={(e) => selectRegion(e)}\n                onChange={val => selectRegion(val)}\n\n                style={{ color: 'grey', fontSize: '17px', height: '40px', boxShadow: 'grey'}}\n                blankOptionLabel=\"No country selected\"\n                defaultOptionLabel=\"Now select a region\"\n                >{geoCity}</RegionDropdown>   \n\n \n        </div>\n    )\n}\n\nexport default GeoSelector; \n"]},"metadata":{},"sourceType":"module"}