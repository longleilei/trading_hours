{"ast":null,"code":"var _jsxFileName = \"/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useReducer } from 'react';\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GeoSelector = () => {\n  _s();\n\n  // const initialGeoState = {  country: '', region: '' }; \n  // const [ geoState, setGeoState ] = useState(initialGeoState); \n  // const selectCountry = (val) => {\n  //     setGeoState({...setGeoState, country: val}); \n  // }\n  // const selectRegion = (val) => {\n  //     setGeoState({...setGeoState, region: val}); \n  // }\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case 'setCountry':\n        return { ...state,\n          country: action.country\n        };\n    }\n  };\n\n  const [state, dispatch] = useReducer(reducer, {\n    country: ''\n  });\n\n  const handleCountryChange = country => {\n    dispatch({\n      type: 'setCountry',\n      country\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CountryDropdown, {\n      value: geoState.country,\n      name: geoState.country,\n      showDefaultOption: true,\n      onChange: val => selectCountry(val)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RegionDropdown, {\n      country: geoState.country,\n      value: geoState.region,\n      name: geoState.region,\n      showDefaultOption: true,\n      onChange: val => selectRegion(val)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GeoSelector, \"91UkT82lWIIhpgJzIFLdgP4fWnI=\");\n\n_c = GeoSelector;\nexport default GeoSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeoSelector\");","map":{"version":3,"sources":["/Users/leilei/Documents/Main/Tech Tasks/Fintonium/tradinghours/src/components/geoSelector/GeoSelector.js"],"names":["React","useState","useReducer","CountryDropdown","RegionDropdown","CountryRegionData","GeoSelector","reducer","state","action","type","country","dispatch","handleCountryChange","geoState","val","selectCountry","region","selectRegion"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,QAAmE,+BAAnE;;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAEtB;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA,QAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAK,YAAL;AACI,eAAO,EACH,GAAGF,KADA;AAEHG,UAAAA,OAAO,EAAEF,MAAM,CAACE;AAFb,SAAP;AAFR;AAOH,GARD;;AAUA,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAqBV,UAAU,CAACK,OAAD,EAAU;AAACI,IAAAA,OAAO,EAAE;AAAV,GAAV,CAArC;;AAEA,QAAME,mBAAmB,GAAIF,OAAD,IAAa;AACrCC,IAAAA,QAAQ,CAAC;AAACF,MAAAA,IAAI,EAAE,YAAP;AAAqBC,MAAAA;AAArB,KAAD,CAAR;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI,QAAC,eAAD;AACI,MAAA,KAAK,EAAEG,QAAQ,CAACH,OADpB;AAEI,MAAA,IAAI,EAAEG,QAAQ,CAACH,OAFnB;AAGI,MAAA,iBAAiB,EAAE,IAHvB;AAII,MAAA,QAAQ,EAAEI,GAAG,IAAIC,aAAa,CAACD,GAAD;AAJlC;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI,QAAC,cAAD;AACI,MAAA,OAAO,EAAED,QAAQ,CAACH,OADtB;AAEI,MAAA,KAAK,EAAEG,QAAQ,CAACG,MAFpB;AAGI,MAAA,IAAI,EAAEH,QAAQ,CAACG,MAHnB;AAII,MAAA,iBAAiB,EAAE,IAJvB;AAKI,MAAA,QAAQ,EAAEF,GAAG,IAAIG,YAAY,CAACH,GAAD;AALjC;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CAhDD;;GAAMT,W;;KAAAA,W;AAkDN,eAAeA,WAAf","sourcesContent":["import React, { useState, useReducer } from 'react'; \nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n\nconst GeoSelector = () => {\n\n    // const initialGeoState = {  country: '', region: '' }; \n\n    // const [ geoState, setGeoState ] = useState(initialGeoState); \n\n    // const selectCountry = (val) => {\n    //     setGeoState({...setGeoState, country: val}); \n    // }\n\n    // const selectRegion = (val) => {\n    //     setGeoState({...setGeoState, region: val}); \n    // }\n\n    const reducer = (state, action) => {\n        switch (action.type) {\n            case 'setCountry':\n                return {\n                    ...state,\n                    country: action.country\n                }\n        }\n    }\n\n    const [state, dispatch ]=  useReducer(reducer, {country: ''});\n\n    const handleCountryChange = (country) => {\n        dispatch({type: 'setCountry', country});\n    }\n\n    return (\n        <div>\n            <CountryDropdown\n                value={geoState.country}\n                name={geoState.country}\n                showDefaultOption={true}\n                onChange={val => selectCountry(val)}\n            />\n\n            <RegionDropdown\n                country={geoState.country}\n                value={geoState.region}\n                name={geoState.region}\n                showDefaultOption={true}\n                onChange={val => selectRegion(val)}\n            />   \n        </div>\n    )\n}\n\nexport default GeoSelector; \n"]},"metadata":{},"sourceType":"module"}