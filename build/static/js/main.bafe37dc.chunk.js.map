{"version":3,"sources":["components/adminPanel/AdminPanel.module.scss","App.module.scss","components/timeSelector/TimeSelector.module.scss","components/regionBox/RegionBox.module.scss","components/footer/Footer.module.scss","components/continentDropdown/ContinentDropdown.module.scss","components/clock/Clock.js","components/regionBox/RegionBox.js","components/continentDropdown/ContinentDropdown.js","components/geoSelector/GeoSelector.js","components/timeSelector/TimeSelector.js","components/adminPanel/AdminPanel.js","constants.js","components/footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Clock","regionName","cityName","utcoffset","openHoursOne","openHoursTwo","localUTC","Date","getTimezoneOffset","utcDiff","Math","abs","breakStatus","opHoursOne","opHoursTwo","useState","secondRatio","minuteRatio","hourRatio","clockState","setClockState","time","setTime","dayTimeStr","setDayTimeStr","hoursClosedFriday","show","setShow","target","setTarget","ref","useRef","calculateCurrentLocalDate","utcdate","date","app_utc_offcet","setHours","getHours","calculateUniversalUTC","checkSingleDigit","String","charAt","clockHandler","currentDate","getSeconds","getMinutes","secondRate","minuteRate","hourRate","clockStateHandler","stsDay","Number","getDay","hours","minutes","ampm","timeStr","digitalClockConverter","calculateLocalTime","openHours","hoursFrom","split","slice","hoursTo","calculateRemainingTime","endtime","dateInCountry","toDateString","total","parse","seconds","floor","checkVal","val","length","useEffect","interval","setInterval","now","clearInterval","className","toUpperCase","style","transform","startTimeTwo","endTimeTwo","startTimeObjTwo","endTimeObjTwo","currentLocalTime","formattedDate","d","month","getMonth","day","getDate","year","getFullYear","join","formatDate","startTime","endTime","startTimeObj","endTimeObj","open","handleOpenButton","getUTCMonth","getUTCDate","getUTCFullYear","hTo","hs","ms","ss","calculateUntilClose","timeNow","hoursTwoFrom","diff","calculateUntilReopen","hFrom","setDate","ds","endtim","calculateUntilOpen","onClick","event","Overlay","placement","containerPadding","Popover","id","Content","class","RegionBox","continentName","data","isLoading","showHandler","continentMap","returnArr","mapArr","styles","map","el","europe","asia","southAmerica","northAmerica","forEach","continent","push","renderByContinent","ContinentDropdown","Form","Group","controlId","Label","Control","as","onChange","e","value","handleChange","GeoSelector","geo","geoCountry","setGeoCountry","geoCity","setGeoCity","selectCountry","color","fontSize","height","country","selectRegion","boxShadow","blankOptionLabel","defaultOptionLabel","TimeSelector","timeSlotOne","timeSlotTwo","timeFrom","onChangeTimeFrom","timeTo","onChangeTimeTo","secondTimeFrom","onChangeSecondTimeFrom","secondTimeTo","onChangeSecondTimeTo","noValidate","TextField","label","type","defaultValue","selectTimeFrom","InputLabelProps","shrink","inputProps","step","selectTimeTo","selectSecondTimeFrom","selectSecondTimeTo","AdminPanel","city","formData","setFormData","from","to","setTimeSlotOne","setTimeSlotTwo","postData","url","a","info","random","fetch","method","mode","headers","body","JSON","stringify","response","json","selectedContinent","selectedGeo","selectedTimeSlotOne","selectedTimeSlotTwo","placeholder","then","console","log","Footer","App","continents","showAdminPanel","setshowAdminPanel","setData","loading","setLoading","fetchData","Items","error","key","regionBox","filter","v","i","indexOf","cont","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,cAAgB,kCAAkC,WAAa,+BAA+B,MAAQ,0BAA0B,MAAQ,0BAA0B,UAAY,8BAA8B,UAAY,gC,mBCA1OD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,SAAW,sBAAsB,MAAQ,mBAAmB,eAAiB,4BAA4B,OAAS,oBAAoB,gBAAkB,+B,mBCAjMD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,QAAU,8BAA8B,UAAY,kC,mBCAlHD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,KAAO,wBAAwB,MAAQ,yBAAyB,WAAa,gC,mBCAnLD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,UAAY,4B,mBCA9DD,EAAOC,QAAU,CAAC,UAAY,uC,kOCgiBfC,EAzhBD,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,WAAYC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAGtDC,GADO,IAAIC,MACKC,oBAElBC,EAAUC,KAAKC,IAAIL,EAAS,IAAOH,EAAU,GAC7CS,GAAc,EACdC,GAAa,EACbC,GAAa,EAR8D,EAazCC,mBAFjB,CAAEC,YAAa,EAAGC,YAAa,EAAGC,UAAW,IAXa,mBAavEC,EAbuE,KAa3DC,EAb2D,OAcrDL,mBAAS,GAd4C,mBAcvEM,EAduE,KAcjEC,EAdiE,OAezCP,mBAAS,IAfgC,mBAevEQ,EAfuE,KAe3DC,EAf2D,OAgB3BT,oBAAS,GAhBkB,mBAgBvEU,EAhBuE,aAiB3CV,oBAAS,IAjBkC,gCAqBvDA,oBAAS,IArB8C,mBAqBxEW,EArBwE,KAqBlEC,EArBkE,OAsBnDZ,mBAAS,MAtB0C,mBAsBxEa,EAtBwE,KAsBhEC,EAtBgE,KAuBzEC,EAAMC,iBAAO,MA0BbC,EAA4B,WAE9B,IAAIC,EAlBsB,WAG1B,IAAIC,EAAO,IAAI3B,KAIX4B,EAAiBD,EAAK1B,oBAM1B,OAHA0B,EAAKE,SAASF,EAAKG,WAAcF,EAAe,IAGzCD,EAKOI,GAOd,OAHAL,EAAQG,SAASH,EAAQI,WAAclC,EAAU,IAG1C8B,GAmBLM,EAAmB,SAAClB,GAItB,OAHGmB,QAAQnB,GAAMoB,OAAO,IAAMpB,IAC1BA,EAAO,IAAMA,GAEVA,GAwCLqB,EAAe,WAGjB,IAAIC,EAAcX,KAbI,SAACE,GAEvB,IAAIlB,EAAckB,EAAKU,aAAe,GAClC3B,GAAeD,EAAckB,EAAKW,cAAgB,GAClD3B,GAAaD,EAAciB,EAAKG,YAAc,GAElDjB,EAAc,2BAAID,GAAL,IAAiB2B,WAAY9B,EAAa+B,WAAY9B,EAAa+B,SAAU9B,KAS1F+B,CAAkBN,GAxCQ,SAACT,GAI3B,IAEIgB,EAFS,CAAC,MAAM,MAAM,MAAM,MAAM,OAAO,MAAM,OACtCC,OAAOjB,EAAKkB,WAKrBC,EAAQnB,EAAKG,WACbiB,EAAUpB,EAAKW,aACfU,EAAOF,GAAS,GAAK,KAAO,KAM5BG,EAAUN,EAAS,KAJvBG,GADAA,GAAgB,KACQ,IAEF,KADtBC,EAAUA,EAAU,GAAK,IAAIA,EAAUA,GACD,IAAMC,EAI5C/B,GAAe,SAAAD,GAAU,OAAIiC,KAqB7BC,CAAsBd,IAKpBe,EAAqB,SAACC,GAIxB,IAAIC,EAAYT,OAAOQ,EAAUE,MAAM,KAAK,GAAGC,MAAM,EAAE,IAAMrD,EACzDsD,EAAUZ,OAAOQ,EAAUE,MAAM,KAAK,GAAGC,MAAM,EAAE,IAAMrD,EAU3D,OAPGsD,EAAU,KACTA,GAAkB,IAGtBxB,EAAiBqB,GACjBrB,EAAiBwB,GAEV,CAAEH,YAAWG,YAIlBC,EAAyB,SAACC,IAET,IAAI1D,MAAO8B,WAA9B,IACIH,EAAO,IAAI3B,KAWX2D,EAAa,UAAMlC,IAA4BmC,eAAlC,YAAoDnC,IAA4BK,WAAhF,YAA8FH,EAAKW,aAAnG,YAAmHX,EAAKU,cAOnIwB,EAAQ7D,KAAK8D,MAAMJ,GAAW1D,KAAK8D,MAAMH,GACzCI,EAAU5D,KAAK6D,MAAQH,EAAM,IAAQ,IACrCd,EAAU5C,KAAK6D,MAAQH,EAAM,IAAK,GAAM,IACxCf,EAAQ3C,KAAK6D,MAAQH,EAAM,KAAgB,IAGjD,MAAO,CAFM1D,KAAK6D,MAAOH,EAAM,OAElB7B,EAAiBc,GAAOd,EAAiBe,GAASf,EAAiB+B,KAwN9EE,EAAW,SAAAC,GACb,QAAY,cAARA,IAA0BA,GAAsB,IAAfA,EAAIC,SA6B7C,OApBAC,qBAAU,WAEN,IAAMC,EAAWC,aAAY,WACzBnC,IACApB,EAAQf,KAAKuE,SACd,KAEH,OAAO,WACHC,cAAcH,MAInB,CAACvD,IASA,sBAAK2D,UAAU,gBAAf,UACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SAA2B9E,IAC3B,qBAAK8E,UAAU,gBAAf,SAAgC/E,EAAWgF,gBAC3C,qBAAKD,UAAU,WAAf,SAA2BzD,OAG/B,qBAAKyD,UAAU,SAAf,SACI,sBAAKA,UAAU,QAAf,UACI,qBAAKA,UAAU,YACXE,MAAO,CAACC,UAAU,0BAAD,OAAkD,IAAtBhE,EAAW6B,SAAvC,WAErB,qBAAKgC,UAAU,cACXE,MAAO,CAACC,UAAU,0BAAD,OAAoD,IAAxBhE,EAAW4B,WAAvC,WAErB,qBAAKiC,UAAU,cACXE,MAAO,CAACC,UAAU,0BAAD,OAAoD,IAAxBhE,EAAW2B,WAAvC,WAGrB,qBAAKkC,UAAU,iBAAf,SACI,sCAGJ,qBAAKA,UAAU,iBAAf,SACI,sCAGJ,qBAAKA,UAAU,iBAAf,SACI,sCAGJ,qBAAKA,UAAU,iBAAf,SACI,sCAGJ,qBAAKA,UAAU,iBAAf,SACI,sCAGJ,qBAAKA,UAAU,iBAAf,SACI,sCAGJ,qBAAKA,UAAU,iBAAf,SACI,sCAGJ,qBAAKA,UAAU,iBAAf,SACI,sCAGJ,qBAAKA,UAAU,iBAAf,SACI,sCAGJ,qBAAKA,UAAU,kBAAf,SACI,uCAGJ,qBAAKA,UAAU,kBAAf,SACI,uCAGJ,qBAAKA,UAAU,kBAAf,SACI,4CAKZ,sBAAKA,UAAU,SAAf,UACI,8BA5Ka,WAIrB,IAWII,EAAcC,EAAYC,EAAiBC,EAX3CC,EAAmBxD,IAGnByD,EA5QW,SAACvD,GAChB,IAAIwD,EAAI,IAAInF,KAAK2B,GAEbyD,EAAQ,IAAMD,EAAEE,WAAa,GAC7BC,EAAM,GAAKH,EAAEI,UACbC,EAAOL,EAAEM,cAOb,OALIL,EAAMjB,OAAS,IACfiB,EAAQ,IAAMA,GACdE,EAAInB,OAAS,IACbmB,EAAM,IAAMA,GAET,CAACE,EAAMJ,EAAOE,GAAKI,KAAK,KAgQXC,CAAWV,GAK3BW,EAAY/F,EAAayD,MAAM,KAAK,GACpCuC,EAAUhG,EAAayD,MAAM,KAAK,GAInCW,EAASnE,KACR+E,EAAe/E,EAAawD,MAAM,KAAK,GACvCwB,EAAahF,EAAawD,MAAM,KAAK,GACrCyB,EAAkB,IAAI/E,KAAJ,UAAYkF,EAAZ,YAA6BL,IAC/CG,EAAgB,IAAIhF,KAAJ,UAAYkF,EAAZ,YAA6BJ,KAKjD,IAAIgB,EAAe,IAAI9F,KAAJ,UAAYkF,EAAZ,YAA6BU,IAC5CG,EAAa,IAAI/F,KAAJ,UAAYkF,EAAZ,YAA6BW,IAG1CG,EAAO,GAuCX,OApCgC,GAA7Bf,EAAiBpC,UAA8C,GAA7BoC,EAAiBpC,SAClDmD,EAAQ,qBAAKvB,UAAU,WAAf,oBAOLR,EAASnE,GACLmF,EAAmBc,GAAcd,EAAmBa,GACnDE,EAAQ,qBAAKvB,UAAU,aAAf,kBACRnE,GAAa,GACP2E,EAAmBc,GAAcd,EAAmBF,GAC1DzE,GAAa,EACbD,GAAc,EACd2F,EAAQ,qBAAKvB,UAAU,cAAf,oBACFQ,EAAmBF,GAAmBE,EAAmBD,GAC/D3E,GAAc,EACdE,GAAa,EACbyF,EAAQ,qBAAKvB,UAAU,aAAf,mBAGRuB,EAAQ,qBAAKvB,UAAU,WAAf,oBAGTQ,EAAmBc,GAAcd,EAAmBa,GACnDE,EAAQ,qBAAKvB,UAAU,aAAf,kBACRnE,GAAa,GAEb0F,EAAQ,qBAAKvB,UAAU,WAAf,oBAObuB,EAyGMC,KAGL,qBAAKxB,UAAU,UAAf,SAGI,8BAAQnE,GAAcC,EAAf,UAlUK,WAExB,IAAImD,EAAU,GAKR0B,GAAQ,IAAIpF,MAAOkG,cACnBZ,GAAM,IAAItF,MAAOmG,aACjBX,GAAO,IAAIxF,MAAOoG,iBAKxB,GAAGnC,EAASnE,GAAc,CACtB,GAAGS,EAAW,CACV,IAAI8F,EAAG,UAAMvG,EAAawD,MAAM,KAAK,GAAGC,MAAM,EAAE,IAChDG,EAAU,IAAI1D,KAAKwF,EAAMJ,EAAOE,EAAKe,EAAI9C,MAAM,EAAE,GAAI,EAAG,EAAG,GAFjD,MAGeE,EAAuBC,GAHtC,mBAGC4C,GAHD,WAGKC,EAHL,KAGSC,EAHT,KAIV,MAAM,GAAN,OAAUF,EAAV,YAAgBC,EAAhB,YAAsBC,GAEtB9C,EAAU,IAAI1D,KAAKwF,EAAMJ,EAAOE,EAAKzF,EAAayD,MAAM,KAAK,GAAGC,MAAM,EAAE,GAAI1D,EAAayD,MAAM,KAAK,GAAGC,MAAM,EAAE,GAAI,GADhH,MAEsBE,EAAuBC,GAF7C,mBAEQ4C,GAFR,WAEYC,EAFZ,KAEgBC,EAFhB,KAGH,MAAM,GAAN,OAAUF,EAAV,YAAgBC,EAAhB,YAAsBC,GAK1B9C,EAAU,IAAI1D,KAAKwF,EAAMJ,EAAOE,EAAKzF,EAAayD,MAAM,KAAK,GAAGC,MAAM,EAAE,GAAI1D,EAAayD,MAAM,KAAK,GAAGC,MAAM,EAAE,GAAI,GADhH,MAEsBE,EAAuBC,GAF7C,mBAEQ4C,GAFR,WAEYC,EAFZ,KAEgBC,EAFhB,KAGH,MAAM,GAAN,OAAUF,EAAV,YAAgBC,EAAhB,YAAsBC,GAoS0BC,GAAjC,gBAAyEpG,EAAW,UA/M9E,WAIzB,IAAMqG,EAAUjF,IACZkF,EAAexD,EAAmBrD,GAAnB,UAGbsF,EAAQsB,EAAQR,cAAgB,EAChCZ,EAAMoB,EAAQP,aACdX,EAAOkB,EAAQN,iBAIjBQ,EADa,IAAI5G,KAAKwF,EAAMJ,EAAOE,EAAKqB,EAAc,EAAG,EAAG,GACxCD,EAGlB3C,EAAU5D,KAAK6D,MAAQ4C,EAAK,IAAQ,IACpC7D,EAAU5C,KAAK6D,MAAQ4C,EAAK,IAAK,GAAM,IACvC9D,EAAQ3C,KAAK6D,MAAQ4C,EAAK,KAAgB,IAEhD,MAAM,GAAN,OAAU5E,EAAiBc,GAA3B,YAAqCd,EAAiBe,GAAtD,YAAkEf,EAAiB+B,IA0L2B8C,GAAP,4BA5RhF,WAEvB,IAAInD,EAAU,IAAI1D,KAKZoF,EAAQ1B,EAAQwC,cAChBZ,EAAM5B,EAAQyC,aACdX,EAAO9B,EAAQ0C,iBACjBU,EAAK,UAAMjH,EAAayD,MAAM,KAAK,IAEvBnD,KAAK6D,MAAQN,EAAQ,IAAQ,IAC7BvD,KAAK6D,MAAQN,EAAQ,IAAK,GAAM,IAClCvD,KAAK6D,MAAQN,EAAQ,KAAgB,IACtCvD,KAAK6D,MAAON,EAAQ,OAOjC,GALAA,EAAU,IAAI1D,KAAKwF,EAAMJ,EAAOE,EAAKwB,EAAMvD,MAAM,EAAE,GAAI,EAAG,EAAG,GAK1DrC,EAAkB,CAEjBwC,EAAQqD,QAAQrD,EAAQ6B,UADE,QAEvB,GAAwB,GAApB7B,EAAQb,SAAc,CAE7Ba,EAAQqD,QAAQrD,EAAQ6B,UADE,QAEvB,GAAuB,GAApB7B,EAAQb,SAAe,CAE7Ba,EAAQqD,QAAQrD,EAAQ6B,UADE,QAG1B7B,EAAQqD,QAAQrD,EAAQ6B,WAG5B7B,EAAO,UAAMA,EAAQE,eAAd,YAAgChB,OAAO/C,EAAayD,MAAM,KAAK,GAAGC,MAAM,EAAE,KAA1E,OAAgF1D,EAAayD,MAAM,KAAK,GAAGC,MAAM,EAAE,GAAnH,OAnCsB,MAqCJE,EAAuBC,GArCnB,mBAqCtBsD,EArCsB,KAqClBV,EArCkB,KAqCdC,EArCc,KAqCVC,EArCU,KAwC7B,IAAW,IAARQ,EAAU,CACT,IAAIC,EAAS,IAAIjH,KACXsF,EAAM2B,EAAOd,aAAa,EAChCc,EAAS,IAAIjH,KAAKwF,EAAMJ,EAAOE,EAAKwB,EAAMvD,MAAM,EAAE,GAAI,EAAG,EAAG,GAC5D0D,EAAM,UAAMA,EAAOrD,eAAb,YAA+BhB,OAAO/C,EAAayD,MAAM,KAAK,GAAGC,MAAM,EAAE,KAAzE,OAA+E1D,EAAayD,MAAM,KAAK,GAAGC,MAAM,EAAE,GAAlH,OAJG,MAKgBE,EAAuBwD,GALvC,mBAKFD,EALE,KAKEV,EALF,KAKMC,EALN,KAKUC,EALV,KAMT,MAAM,GAAN,OAAUQ,EAAV,aAAiBV,EAAjB,YAAuBC,EAAvB,YAA6BC,GAKjC,MAAM,GAAN,OAAUQ,EAAV,aAAiBV,EAAjB,YAAuBC,EAAvB,YAA6BC,GAyO+HU,GAArD,mBAG/F,sBAAK3F,IAAKA,EAAV,UAEI,qBAAKkD,UAAU,QAAQ0C,QAjenB,SAACC,GACjBhG,GAASD,GACTG,EAAU8F,EAAM/F,SA+dJ,mCAEA,cAACgG,EAAA,EAAD,CAASlG,KAAMA,EAAME,OAAQA,EAAQiG,UAAU,MAAMC,iBAAkB,GAAvE,SACI,cAACC,EAAA,EAAD,CAASC,GAAG,oBAAZ,SACI,cAACD,EAAA,EAAQE,QAAT,UAEI,sBAAKC,MAAM,aAAX,UACI,sBAAKA,MAAM,UAAX,UACI,gCAAMhI,EAAS+E,cAAf,WACA,8BAAM7E,IACoB,oBAAhBC,GAAiC,8BAAMA,OAErD,sBAAK6H,MAAM,UAAX,UACI,6CACA,wCAAS3F,EAAiBmB,EAAmBtD,GAAnB,WAA1B,YAA4EA,EAAayD,MAAM,KAAK,GAAGC,MAAM,EAAE,GAA/G,cAAuHvB,EAAiBmB,EAAmBtD,GAAnB,SAAxI,YAAwLA,EAAayD,MAAM,KAAK,GAAGC,MAAM,EAAE,MACzNU,EAASnE,GACV,wCAASkC,EAAiBmB,EAAmBrD,GAAnB,WAA1B,YAA4EA,EAAawD,MAAM,KAAK,GAAGC,MAAM,EAAE,GAA/G,cAAuHvB,EAAiBmB,EAAmBrD,GAAnB,SAAxI,YAAwLA,EAAawD,MAAM,KAAK,GAAGC,MAAM,EAAE,MAAa,2BC5alQqE,EA/FG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,cAAeC,EAAW,EAAXA,KAAW,EAGjBtH,oBAAS,GAHQ,mBAGnCW,EAHmC,KAG7BC,EAH6B,OAIPZ,oBAAS,GAJF,mBAInCuH,EAJmC,KAOrCC,GAPqC,KAOvB,WAChB5G,GAAQ,SAAAD,GAAI,OAAKA,OAGf8G,EAAe,SAACC,EAAWC,GAiB7B,OAfa,qBAAK1D,UAAW2D,aAAhB,SAELD,EAAOE,KAAI,SAAAC,GAAE,OAET,cAAC,EAAD,CAEI5I,WAAY4I,EAAE,QACd3I,SAAU2I,EAAE,KACZ1I,UAAW0I,EAAE,UACbzI,aAAcyI,EAAE,aAChBxI,aAAcwI,EAAE,cALXA,EAAE,UA2D3B,OACI,sBAAK7D,UAAW2D,YAAhB,UACI,sBAAK3D,UAAW2D,aAAhB,UACI,qBAAK3D,UAAW2D,OAAhB,SAA8BP,IAC9B,sBAAKpD,UAAW2D,QAAhB,UACML,GAAa,6CACb5G,EACE,cAAC,IAAD,CAAmBgG,QAASa,IAC5B,cAAC,IAAD,CAAkBb,QAASa,UAIrC7G,GAxDgB,SAAC0G,GAGvB,IAAIU,EAAS,GACTC,EAAO,GACPC,EAAe,GACfC,EAAe,GAuBnB,OAdAZ,EAAKa,SAAQ,SAAAxD,GAEU,WAAhBA,EAAEyD,UACDL,EAAOM,KAAK1D,GACU,SAAhBA,EAAEyD,UACRJ,EAAKK,KAAK1D,GACW,iBAAfA,EAAEyD,UACRH,EAAaI,KAAK1D,GACG,iBAAfA,EAAEyD,WACRF,EAAaG,KAAK1D,MAKnB0C,GACH,IAAK,OACD,OAAOI,EArBN,EAqBuBO,GAC5B,IAAK,SACD,OAAOP,EAxBL,EAwBuBM,GAC7B,IAAK,gBACD,OAAON,EAxBF,EAwBuBQ,GAChC,IAAK,gBACD,OAAOR,EAzBF,EAyBuBS,GAChC,QACI,OAAO,GAiBDI,CAAkBjB,O,gBClEzBkB,EA1BW,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,UAQzB,OACI,qBAAKnE,UAAW2D,YAAhB,SACI,cAACY,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,6BAAtB,UACI,cAACF,EAAA,EAAKG,MAAN,+BACA,eAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,SAASC,SAAU,SAACC,GAAD,OAV/B,SAACA,GAClBX,EAAUW,EAAElI,OAAOmI,OASoCC,CAAaF,IAAxD,UACI,mDACA,0CACA,4CACA,mDACA,8D,QC0BTG,EA9CK,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAAU,EAESnJ,mBAAS,IAFlB,mBAErBoJ,EAFqB,KAETC,EAFS,OAGGrJ,mBAAS,IAHZ,mBAGrBsJ,EAHqB,KAGZC,EAHY,KAmB7B,OACI,gCAEI,cAAC,IAAD,CACIP,MAAOI,EACPN,SAAU,SAAApF,GAAG,OAjBH,SAACA,GACnB2F,GAAc,SAAAD,GAAU,OAAI1F,KAgBH8F,CAAc9F,IAG/BS,MAAO,CAAEsF,MAAO,OAAQC,SAAU,OAAQC,OAAQ,QALtD,SAMMP,IAEN,cAAC,IAAD,CACIQ,QAASR,EACTJ,MAAOM,EAEPR,SAAU,SAAApF,GAAG,OAvBJ,SAACA,GAClB6F,GAAW,SAAAD,GAAO,OAAI5F,KACtByF,EAAI,CAACC,EAAY1F,IAqBQmG,CAAanG,IAE9BS,MAAO,CAAEsF,MAAO,OAAQC,SAAU,OAAQC,OAAQ,OAAQG,UAAW,QACrEC,iBAAiB,sBACjBC,mBAAmB,sBARvB,SASMV,Q,gBCqEHW,EA3GM,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YAAkB,EAEdnK,mBAAS,SAFK,mBAE5CoK,EAF4C,KAElCC,EAFkC,OAGlBrK,mBAAS,SAHS,mBAG5CsK,EAH4C,KAGpCC,EAHoC,OAKFvK,mBAAS,SALP,mBAK5CwK,EAL4C,KAK5BC,EAL4B,OAMNzK,mBAAS,SANH,mBAM5C0K,EAN4C,KAM9BC,EAN8B,KA6BnD,OACA,uBAAM1G,UAAW2D,YAAkBgD,YAAU,EAA7C,UAEI,cAACC,EAAA,EAAD,CACI5G,UAAW2D,YACXX,GAAG,OACH6D,MAAM,OACNC,KAAK,OACLC,aAAa,QACbhC,MAAOoB,EACPtB,SAAU,SAAAC,GAAC,OA9BI,SAACA,GACpBsB,GAAiB,SAAAD,GAAQ,OAAIrB,EAAElI,OAAOmI,SA6BnBiC,CAAelC,IAC9BmC,gBAAiB,CACjBC,QAAQ,GAERC,WAAY,CACZC,KAAM,OAKV,cAACR,EAAA,EAAD,CACI5G,UAAW2D,YACXX,GAAG,OACH6D,MAAM,KACNC,KAAK,OACLC,aAAa,QACbhC,MAAOsB,EACPxB,SAAU,SAAAC,GAAC,OA3CE,SAACA,GAClBwB,GAAe,SAAAD,GAAM,OAAIvB,EAAElI,OAAOmI,SAClCkB,EAAY,CAACE,EAAUrB,EAAElI,OAAOmI,QAyCbsC,CAAavC,IAE5BmC,gBAAiB,CACjBC,QAAQ,GAERC,WAAY,CACZC,KAAM,OAIV,qBAAKpH,UAAW2D,UAAhB,qCAEA,cAACiD,EAAA,EAAD,CACI5G,UAAW2D,YACXX,GAAG,OACH6D,MAAM,OACNC,KAAK,OACLC,aAAa,QACbhC,MAAOwB,EACP1B,SAAU,SAAAC,GAAC,OAxDU,SAACA,GAC1B0B,GAAuB,SAAAD,GAAc,OAAIzB,EAAElI,OAAOmI,SAuD/BuC,CAAqBxC,IACpCmC,gBAAiB,CACjBC,QAAQ,GAERC,WAAY,CACZC,KAAM,OAKV,cAACR,EAAA,EAAD,CACI5G,UAAW2D,YACXX,GAAG,OACH6D,MAAM,KACNC,KAAK,OACLC,aAAa,QACbhC,MAAO0B,EACP5B,SAAU,SAAAC,GAAC,OArEQ,SAACA,GACxB4B,GAAqB,SAAAD,GAAY,OAAI3B,EAAElI,OAAOmI,SAC9CmB,EAAY,CAACK,EAAgBzB,EAAElI,OAAOmI,QAmEnBwC,CAAmBzC,IAElCmC,gBAAiB,CACjBC,QAAQ,GAERC,WAAY,CACZC,KAAM,W,QCXHI,EAnFI,WAAM,MAGazL,mBAAS,CAAEoI,UAAW,GAAIwB,QAAS,GAAI8B,KAAM,GAAItM,UAAW,KAHzE,mBAGbuM,EAHa,KAGHC,EAHG,OAImB5L,mBAAS,CAAE6L,KAAM,GAAIC,GAAI,KAJ5C,mBAIb5B,EAJa,KAIA6B,EAJA,OAKmB/L,mBAAS,CAAE6L,KAAM,GAAIC,GAAI,KAL5C,mBAKb3B,EALa,KAKA6B,EALA,KASfC,EAAQ,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DAEPC,EAAO,CACD,GAAK,GAAL,OAASzM,KAAK6D,MAAsB,QAAhB7D,KAAK0M,WACzB,UAAaV,EAASvD,UACtB,QAAWuD,EAAS/B,QACpB,KAAQ+B,EAASD,KACjB,UAAY,GAAZ,OAAmC,GAAnBC,EAASvM,WACzB,aAAe,GAAf,OAAmB8K,EAAY2B,KAA/B,YAAuC3B,EAAY4B,IACnD,aAAe,GAAf,OAAmB3B,EAAY0B,KAA/B,YAAuC1B,EAAY2B,KAGnD,CACR,GAAK,QACL,UAAa,SACb,QAAW,UACX,KAAQ,GACR,UAAY,OACZ,aAAgB,cAChB,aAAgB,IAnBP,SAsBUQ,MAAMJ,EAAK,CAC9BK,OAAQ,OACRC,KAAM,OACNC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUR,KA1BZ,cAsBPS,EAtBO,yBA6BNA,EAASC,QA7BH,2CAAH,sDAyCd,OACI,qBAAK7I,UAAW2D,gBAAhB,SACI,sBAAK3D,UAAW2D,aAAhB,UAEI,cAAC,EAAD,CAAmBQ,UAAW,SAAA2E,GAAiB,OAAInB,EAAY,2BAAID,GAAL,IAAevD,UAAW2E,QAExF,sBAAK9I,UAAW2D,QAAhB,UACI,qBAAK3D,UAAW2D,QAAhB,uCACA,cAAC,EAAD,CACIuB,IAAK,SAAA6D,GAAW,OAAIpB,EAAY,2BAAID,GAAL,IAAe/B,QAASoD,EAAY,GAAItB,KAAMsB,EAAY,YAGjG,sBAAK/I,UAAW2D,QAAhB,UACI,qBAAK3D,UAAW2D,QAAhB,uFACA,cAAC,EAAD,CACIsC,YAAa,SAAA+C,GAAmB,OAAIlB,EAAe,2BAAK7B,GAAN,IAAmB2B,KAAMoB,EAAoB,GAAInB,GAAImB,EAAoB,OAC3H9C,YAAa,SAAA+C,GAAmB,OAAIlB,EAAe,2BAAK7B,GAAN,IAAmB0B,KAAMqB,EAAoB,GAAIpB,GAAIoB,EAAoB,YAGnI,sBAAKjJ,UAAW2D,QAAhB,UACI,wFACA,uBAAOmD,KAAK,OAAOoC,YAAY,aAAarE,SAAU,SAAAC,GAAC,OAAI6C,EAAY,2BAAID,GAAL,IAAevM,UAAW2J,EAAElI,OAAOmI,eAG7G,qBAAK/E,UAAW2D,YAAhB,SACI,wBAAQ3D,UAAW2D,YAAkBjB,QAjClC,WACfsF,ECnDgB,+EDmDamB,MAAK,SAAA9F,GAAI,OAAI+F,QAAQC,IAAIhG,OAgC1C,4B,QExELiG,EARA,WACX,OACI,qBAAKtJ,UAAW2D,SAAhB,SACI,qBAAK3D,UAAW2D,YAAhB,iE,iBCgJG4F,EA/FH,WAEV,IACIC,EAAa,GAHA,EAO4BzN,oBAAS,GAPrC,mBAOT0N,EAPS,KAOOC,EAPP,OAQS3N,mBAAS,IARlB,mBAQTsH,EARS,KAQHsG,EARG,OASe5N,oBAAS,GATxB,mBAST6N,EATS,KASAC,EATA,KAgBXC,EAAS,uCAAG,WAAM7B,GAAN,iBAAAC,EAAA,6DAChB2B,GAAW,SAAAD,GAAO,OAAI,KADN,SAEOvB,MAAMJ,GAFb,cAEVW,EAFU,yBAKKA,EAASC,OALd,OAKRJ,EALQ,OAMdoB,GAAW,SAAAD,GAAO,OAAI,KAKtBD,GAAQ,SAAAtG,GAAI,OAAIoF,EAAKpF,KAAK0G,SAXZ,kDAedX,QAAQC,IAAI,wBACZD,QAAQY,MAAR,MAhBc,0DAAH,sDAyBf,IAAK,IAAIC,KAAO5G,EACdmG,EAAWpF,KAAKf,EAAK4G,GAAK9F,WAK5B,IAAI+F,EAFeV,EAAWW,QAAO,SAACC,EAAGC,EAAGnC,GAAP,OAAaA,EAAEoC,QAAQF,KAAOC,KAElCzG,KAAK,SAAA2G,GAAI,OACxC,cAAC,EAAD,CAEEnH,cAAemH,EACflH,KAAMA,GAFDkH,EAAKvH,OAWd,OALArD,qBAAU,WACRmK,EFhHmB,+EEiHnB,IAIA,sBAAK9J,UAAW2D,MAAhB,UACE,qBAAK3D,UAAW2D,WAAhB,SACE,qBAAK3D,UAAW2D,QAAhB,gCAEF,sBAAK3D,UAAW2D,iBAAhB,UAEGiG,EAAU,qBAAK5J,UAAW2D,SAAhB,SAA+B,cAAC,IAAD,CAAU6B,MAAM,wBAA+B0E,EAazF,qBAAKlK,UAAW2D,kBAAhB,SACE,wBAAQjB,QAtES,WACvBgH,GAAkB,SAAAD,GAAc,OAAKA,MAqE/B,2BAICA,GAAkB,cAAC,EAAD,OAKvB,cAAC,EAAD,QCtISe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bafe37dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"AdminPanel_mainContainer__eCgn9\",\"contentBox\":\"AdminPanel_contentBox__2ld4g\",\"input\":\"AdminPanel_input__1hDGF\",\"title\":\"AdminPanel_title__K2rkn\",\"submitBox\":\"AdminPanel_submitBox__2WnIK\",\"submitBtn\":\"AdminPanel_submitBtn__1pi5c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"titleBox\":\"App_titleBox__2GMTu\",\"title\":\"App_title__2oBiX\",\"mainContentBox\":\"App_mainContentBox__1aecN\",\"loader\":\"App_loader__Dop8H\",\"buttonContainer\":\"App_buttonContainer__1xV-k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TimeSelector_container__2LIqj\",\"divider\":\"TimeSelector_divider__3N4WB\",\"textField\":\"TimeSelector_textField__2c22J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regionBox\":\"RegionBox_regionBox__1h1Sb\",\"greyStripe\":\"RegionBox_greyStripe__3tqZx\",\"left\":\"RegionBox_left__NuNrX\",\"right\":\"RegionBox_right__2avtE\",\"clockBoxes\":\"RegionBox_clockBoxes__Y_2Rc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__1V-Tq\",\"copyright\":\"Footer_copyright__sR80m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ddWrapper\":\"ContinentDropdown_ddWrapper__1HUyH\"};","import React, { useState, useEffect, useRef } from 'react'; \nimport { Overlay, Popover } from 'react-bootstrap';\n\nimport './Clock.css'; \nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nconst Clock = ({ regionName, cityName, utcoffset, openHoursOne, openHoursTwo }) => {\n\n    const date = new Date;\n    const localUTC = date.getTimezoneOffset();\n\n    let utcDiff = Math.abs(localUTC/60) - (utcoffset/60); \n    let breakStatus = false; \n    let opHoursOne = false; \n    let opHoursTwo = false; \n    \n\n    const initialState = { secondRatio: 0, minuteRatio: 0, hourRatio: 0 }; \n    \n    const [ clockState, setClockState ] = useState(initialState);\n    const [ time, setTime ] = useState(0);  \n    const [ dayTimeStr, setDayTimeStr ] = useState('');\n    const [ hoursClosedFriday, setHoursClosedFriday ] = useState(false); \n    const [ hoursOpen, setHoursOpen ] = useState(false); \n    \n\n    //for bs popup \n    const [show, setShow] = useState(false);\n    const [target, setTarget] = useState(null);\n    const ref = useRef(null);\n\n    \n    \n    const handleClick = (event) => {\n        setShow(!show);\n        setTarget(event.target);\n    };\n\n\n    const calculateUniversalUTC = () => {\n\n        //returns local date from where the app is used \n        let date = new Date;    \n        //console.log(date); \n    \n        //offcet taken at the place where app is used \n        let app_utc_offcet = date.getTimezoneOffset(); //returns -480 \n\n        //this is the abstract date according to UTC\n        date.setHours(date.getHours() + (app_utc_offcet/60)); \n        //console.log('ABSTRACT TIME', date); \n\n        return date; \n    }\n\n    const calculateCurrentLocalDate = () => {\n\n        let utcdate = calculateUniversalUTC(); \n        //console.log(\"UTCDATE\" + utcdate); \n\n        //calculate time according to offcet of the country\n        utcdate.setHours(utcdate.getHours() + (utcoffset/60)); \n        //console.log('SHANGHAI TIME', utcdate); \n\n        return utcdate; \n\n    }\n\n    const formatDate = (date) => {\n        let d = new Date(date); \n\n        let month = '' + (d.getMonth() + 1);\n        let day = '' + d.getDate();\n        let year = d.getFullYear();\n\n        if (month.length < 2) \n            month = '0' + month;\n        if (day.length < 2) \n            day = '0' + day;\n\n        return [year, month, day].join('-');\n    }\n\n    const checkSingleDigit = (time) => {\n        if(String(+time).charAt(0) == time){\n            time = '0' + time; \n        }\n        return time; \n    }\n\n\n\n    const digitalClockConverter = (date) => {\n\n        \n        //getting day of the week \n        const days = ['Sun','Mon','Tue','Wed','Thur','Fri','Sat'];\n        let dayNum = Number(date.getDay()); \n        let stsDay = days[dayNum]; \n        \n\n        //getting hours in am/pm \n        let hours = date.getHours();\n        let minutes = date.getMinutes();\n        let ampm = hours >= 12 ? 'PM' : 'AM';\n        hours = hours % 12;\n        hours = hours ? hours : 12; \n        minutes = minutes < 10 ? '0'+minutes : minutes;\n        let strTime = hours + ':' + minutes + ' ' + ampm;\n        \n        let timeStr = stsDay + ' ' + strTime;\n\n        setDayTimeStr( dayTimeStr => timeStr); \n        \n    } \n  \n\n    const clockStateHandler = (date) => {\n        \n        let secondRatio = date.getSeconds() / 60; \n        let minuteRatio = (secondRatio + date.getMinutes()) / 60; \n        let hourRatio = (minuteRatio + date.getHours()) / 12;  \n    \n        setClockState({...clockState, secondRate: secondRatio, minuteRate: minuteRatio, hourRate: hourRatio});\n\n    }\n\n    const clockHandler = () => {\n\n        \n        let currentDate = calculateCurrentLocalDate(); \n    \n        clockStateHandler(currentDate); \n        digitalClockConverter(currentDate);\n\n\n    }\n\n    const calculateLocalTime = (openHours) => {\n\n\n\n        let hoursFrom = Number(openHours.split('-')[0].slice(0,2)) + utcDiff; \n        let hoursTo = Number(openHours.split('-')[1].slice(0,2)) + utcDiff;\n        \n        \n        if(hoursTo > 24){\n            hoursTo = hoursTo%24; \n        }\n\n        checkSingleDigit(hoursFrom); \n        checkSingleDigit(hoursTo); \n        \n        return { hoursFrom, hoursTo }; \n        \n    }\n\n    const calculateRemainingTime = (endtime) => {\n        \n        let hourWithDiff = new Date().getHours()-utcDiff; \n        let date = new Date(); \n\n        //let dateInCountry = ''; \n\n        //check if day in appRegion is the same as date in country\n        // if(date.getDate() === calculateCurrentLocalDate().getDate() ){\n        //     dateInCountry = `${date.toDateString()} ${Math.abs(hourWithDiff)}:${date.getMinutes()}:${date.getSeconds()}`; \n        // } else { \n        //     dateInCountry = `${calculateCurrentLocalDate().toDateString()} ${calculateCurrentLocalDate().getHours()}:${date.getMinutes()}:${date.getSeconds()}`;  \n        // }\n\n        let dateInCountry = `${calculateCurrentLocalDate().toDateString()} ${calculateCurrentLocalDate().getHours()}:${date.getMinutes()}:${date.getSeconds()}`;  \n\n\n        //let dateInCountry = `${date.toDateString()} ${Math.abs(hourWithDiff)}:${date.getMinutes()}:${date.getSeconds()}`; \n        //console.log(dateInCountry); \n        //console.log(endtime); \n\n        const total = Date.parse(endtime) - Date.parse(dateInCountry);\n        const seconds = Math.floor( (total/1000) % 60 );\n        const minutes = Math.floor( (total/1000/60) % 60 );\n        const hours = Math.floor( (total/(1000*60*60)) % 24 );\n        const days = Math.floor( total/(1000*60*60*24) );\n\n        return [days,checkSingleDigit(hours),checkSingleDigit(minutes),checkSingleDigit(seconds)]; \n    }\n\n    const calculateUntilClose = () => {\n\n        let endtime = ''; \n\n       \n\n        //dublication \n        const month = new Date().getUTCMonth(); \n        const day = new Date().getUTCDate();\n        const year = new Date().getUTCFullYear();\n\n       \n        \n\n        if(checkVal(openHoursTwo)){\n            if(opHoursTwo){        \n                let hTo = `${openHoursTwo.split('-')[1].slice(0,2)}`;\n                endtime = new Date(year, month, day, hTo.slice(0,2), 0, 0, 0); \n                const [ds, hs, ms, ss] = calculateRemainingTime(endtime); \n                return `${hs}:${ms}:${ss}`; \n            } else {\n                endtime = new Date(year, month, day, openHoursOne.split('-')[1].slice(0,2), openHoursOne.split('-')[1].slice(3,5), 0);\n                const [ds, hs, ms, ss] = calculateRemainingTime(endtime); \n                return `${hs}:${ms}:${ss}`; \n            }\n\n\n        } else { \n            endtime = new Date(year, month, day, openHoursOne.split('-')[1].slice(0,2), openHoursOne.split('-')[1].slice(3,5), 0); \n            const [ds, hs, ms, ss] = calculateRemainingTime(endtime); \n            return `${hs}:${ms}:${ss}`; \n            \n\n        }\n\n    }\n    \n\n    const calculateUntilOpen = () => {\n\n        let endtime = new Date(); \n        \n\n\n        //dublicates \n        const month = endtime.getUTCMonth(); \n        const day = endtime.getUTCDate();\n        const year = endtime.getUTCFullYear();\n        let hFrom = `${openHoursOne.split('-')[0]}`;\n\n        const seconds = Math.floor( (endtime/1000) % 60 );\n        const minutes = Math.floor( (endtime/1000/60) % 60 );\n        const hours = Math.floor( (endtime/(1000*60*60)) % 24 );\n        const days = Math.floor( endtime/(1000*60*60*24) );\n\n        endtime = new Date(year, month, day, hFrom.slice(0,2), 0, 0, 0); \n\n        \n\n        //on Friday when it's closed already, we add + 2 days to get to Monday (get endtime)\n        if(hoursClosedFriday){\n            const numberOfDaysToAdd = 3;\n            endtime.setDate(endtime.getDate() + numberOfDaysToAdd); \n        } else if (endtime.getDay() == 6){ //check if Saturday \n            const numberOfDaysToAdd = 2;\n            endtime.setDate(endtime.getDate() + numberOfDaysToAdd); \n        } else if(endtime.getDay() == 0) { \n            const numberOfDaysToAdd = 1;\n            endtime.setDate(endtime.getDate() + numberOfDaysToAdd); \n        } else {\n            endtime.setDate(endtime.getDate()); \n        }\n\n        endtime = `${endtime.toDateString()} ${Number(openHoursOne.split('-')[0].slice(0,2))}${openHoursOne.split('-')[0].slice(2,5)}:00`;        \n\n        const [ds, hs, ms, ss] = calculateRemainingTime(endtime); \n\n        //avoid -1 day \n        if(ds === -1){\n            let endtim = new Date(); \n            const day = endtim.getUTCDate()+1;\n            endtim = new Date(year, month, day, hFrom.slice(0,2), 0, 0, 0); \n            endtim = `${endtim.toDateString()} ${Number(openHoursOne.split('-')[0].slice(0,2))}${openHoursOne.split('-')[0].slice(2,5)}:00`; \n            const [ds, hs, ms, ss] = calculateRemainingTime(endtim); \n            return `${ds}d ${hs}:${ms}:${ss}`;\n\n        }\n        \n\n        return `${ds}d ${hs}:${ms}:${ss}`; \n\n\n    }\n\n    const calculateInBreak = () => {\n\n        if(checkVal(openHoursTwo)){\n            const timeNow = calculateCurrentLocalDate(); \n            let hoursOneTo = calculateLocalTime(openHoursOne)['hoursTo']; \n            let hoursTwoFrom = calculateLocalTime(openHoursTwo)['hoursFrom']; \n            let timeString = `${timeNow.getHours()}:${timeNow.getMinutes()}`; \n            \n            let buttonStatus = ''; \n    \n            buttonStatus = timeString < `${hoursTwoFrom}:00` && timeString > `${hoursOneTo}:00` \n            ? true : false; \n    \n            return buttonStatus; \n        }\n\n        return 0; \n\n        \n    }\n\n    const calculateUntilReopen = () => {\n\n \n        //get timeNow and endTime \n        const timeNow = calculateCurrentLocalDate();\n        let hoursTwoFrom = calculateLocalTime(openHoursTwo)['hoursFrom']; \n       \n        //create proper date objects for difference \n        const month = timeNow.getUTCMonth() + 1; \n        const day = timeNow.getUTCDate();\n        const year = timeNow.getUTCFullYear();\n\n\n        let hoursOneTo = new Date(year, month, day, hoursTwoFrom, 0, 0, 0); \n        let diff = hoursOneTo - timeNow; \n\n        //dublicate\n        const seconds = Math.floor( (diff/1000) % 60 );\n        const minutes = Math.floor( (diff/1000/60) % 60 );\n        const hours = Math.floor( (diff/(1000*60*60)) % 24 );\n\n        return `${checkSingleDigit(hours)}:${checkSingleDigit(minutes)}:${checkSingleDigit(seconds)}`; \n\n    }\n\n  \n\n    const handleOpenButton = () => {\n\n\n        //get current local time\n        let currentLocalTime = calculateCurrentLocalDate(); \n        //console.log(currentLocalTime); \n\n        let formattedDate = formatDate(currentLocalTime); \n        \n        //const timeNow = new Date(); \n        \n        \n        let startTime = openHoursOne.split('-')[0]; \n        let endTime = openHoursOne.split('-')[1]; \n\n        let startTimeTwo, endTimeTwo, startTimeObjTwo, endTimeObjTwo; \n\n        if(checkVal(openHoursTwo)){\n            startTimeTwo = openHoursTwo.split('-')[0]; \n            endTimeTwo = openHoursTwo.split('-')[1];\n            startTimeObjTwo = new Date(`${formattedDate} ${startTimeTwo}`); \n            endTimeObjTwo = new Date(`${formattedDate} ${endTimeTwo}`);\n        }\n        \n\n\n        let startTimeObj = new Date(`${formattedDate} ${startTime}`); \n        let endTimeObj = new Date(`${formattedDate} ${endTime}`);\n       \n\n        let open = ''; \n\n        //check if it's Saturday or Sunday \n        if(currentLocalTime.getDay() == 6 || currentLocalTime.getDay() == 0){\n            open = (<div className=\"oval red\">Closed</div>); \n            \n\n        } else {\n            \n            //check if openHoursTwo!=undefined => we have time with the break \n            //otherwise we have only open and close\n            if(checkVal(openHoursTwo)){\n                if(currentLocalTime < endTimeObj && currentLocalTime > startTimeObj){\n                    open = (<div className=\"oval green\">Open</div>); \n                    opHoursOne = true; \n                } else if(currentLocalTime > endTimeObj && currentLocalTime < startTimeObjTwo){\n                    opHoursOne = false; \n                    breakStatus = true; \n                    open = (<div className=\"oval yellow\">Break</div>); \n                } else if(currentLocalTime > startTimeObjTwo && currentLocalTime < endTimeObjTwo){\n                    breakStatus = false;\n                    opHoursTwo = true; \n                    open = (<div className=\"oval green\">Open</div>); \n   \n                } else {       \n                    open = (<div className=\"oval red\">Closed</div>) \n                }\n            } else {\n                if(currentLocalTime < endTimeObj && currentLocalTime > startTimeObj ){\n                    open = (<div className=\"oval green\">Open</div>); \n                    opHoursOne = true; \n                } else {\n                    open = (<div className=\"oval red\">Closed</div>); \n                }\n            }\n\n        }\n            \n         \n        return open;  \n    }\n    const checkVal = val => {\n        if((val === 'undefined') || (!val || val.length === 0)){\n            return false; \n        }\n        return true; \n        \n    }\n\n\n     \n    useEffect(() => {\n        //console.log('CITYNAME', cityName); \n        const interval = setInterval(() => {\n            clockHandler();\n            setTime(Date.now())    \n        }, 1000); \n       \n        return () => {\n            clearInterval(interval);\n        };\n    \n        \n    }, [time]); \n\n\n    // console.log(opHoursOne)\n    // console.log(opHoursTwo)\n\n    \n\n    return (\n        <div className=\"mainContainer\">\n            <div className=\"top\">\n                <div className=\"mainFont\">{cityName}</div>\n                <div className=\"secondaryFont\">{regionName.toUpperCase()}</div>\n                <div className=\"mainFont\">{dayTimeStr}</div>\n            </div>\n\n            <div className=\"middle\">\n                <div className=\"clock\">\n                    <div className=\"hand hour\" \n                        style={{transform: `translate(-50%) rotate(${clockState.hourRate * 360}deg)`}}>\n                    </div>\n                    <div className=\"hand minute\"\n                        style={{transform: `translate(-50%) rotate(${clockState.minuteRate * 360}deg)`}}>\n                    </div>\n                    <div className=\"hand second\"\n                        style={{transform: `translate(-50%) rotate(${clockState.secondRate * 360}deg)`}}>\n                    </div>\n\n                    <div className=\"number number1\">\n                        <div>1</div>\n                    </div>\n\n                    <div className=\"number number2\">\n                        <div>2</div>\n                    </div>\n\n                    <div className=\"number number3\">\n                        <div>3</div>\n                    </div>\n\n                    <div className=\"number number4\">\n                        <div>4</div>\n                    </div>\n\n                    <div className=\"number number5\">\n                        <div>5</div>\n                    </div>\n\n                    <div className=\"number number6\">\n                        <div>6</div>\n                    </div>\n\n                    <div className=\"number number7\">\n                        <div>7</div>\n                    </div>\n\n                    <div className=\"number number8\">\n                        <div>8</div>\n                    </div>\n\n                    <div className=\"number number9\">\n                        <div>9</div>\n                    </div>\n\n                    <div className=\"number number10\">\n                        <div>10</div>\n                    </div>\n\n                    <div className=\"number number11\">\n                        <div>11</div>\n                    </div>\n\n                    <div className=\"number number12\">\n                        <div>12</div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"bottom\">\n                <div>\n\n                    {handleOpenButton()}\n\n                </div>\n                <div className=\"addInfo\">\n                    {/* {breakStatus ? <div>{calculateUntilReopen()} until re-open</div> : null} */}\n                    \n                    <div>{ (opHoursOne || opHoursTwo) ? (`${calculateUntilClose()} until close`) : (breakStatus ? (`${calculateUntilReopen()} until re-open`) : (`${calculateUntilOpen()} until open` )) }</div>\n                </div>\n\n                <div ref={ref}>\n                    \n                    <div className=\"oval2\" onClick={handleClick}>Show Open/Close Hours</div>\n\n                    <Overlay show={show} target={target} placement=\"top\" containerPadding={20}>\n                        <Popover id=\"popover-contained\">\n                            <Popover.Content>\n\n                                <div class=\"contentBox\">\n                                    <div class=\"shedule\">\n                                        <div>{cityName.toUpperCase()} TIME</div>\n                                        <div>{openHoursOne}</div>\n                                        {( typeof openHoursTwo != 'undefined') && (<div>{openHoursTwo}</div>)}\n                                    </div>\n                                    <div class=\"shedule\">\n                                        <div>LOCAL TIME</div>\n                                        <div>{`${checkSingleDigit(calculateLocalTime(openHoursOne)['hoursFrom'])}:${openHoursOne.split('-')[0].slice(3,5)} - ${checkSingleDigit(calculateLocalTime(openHoursOne)['hoursTo'])}:${openHoursOne.split('-')[1].slice(3,5)}`}</div>\n                                        { checkVal(openHoursTwo) ?  \n                                        (<div>{`${checkSingleDigit(calculateLocalTime(openHoursTwo)['hoursFrom'])}:${openHoursTwo.split('-')[0].slice(3,5)} - ${checkSingleDigit(calculateLocalTime(openHoursTwo)['hoursTo'])}:${openHoursTwo.split('-')[1].slice(3,5)}`}</div>):null}\n                                    </div>  \n                                </div>\n                                \n                            </Popover.Content>\n                        </Popover>\n                    </Overlay>\n                </div>               \n            </div>            \n        </div>\n    )\n}\n\nexport default Clock; \n","import React, { useState, useEffect } from 'react'; \nimport * as styles from './RegionBox.module.scss'; \nimport { AiFillMinusCircle } from 'react-icons/ai'; \nimport { AiFillPlusCircle } from 'react-icons/ai'; \n\nimport Clock from '../clock/Clock'; \n\n\n\nconst RegionBox = ({ continentName, data }) => {\n\n   \n    const [ show, setShow ] = useState(true);\n    const [ isLoading, setIsLoading ] = useState(false); \n\n\n    const showHandler = () => {\n        setShow(show => !show ); \n    }\n\n    const continentMap = (returnArr, mapArr ) => {\n\n        returnArr = (<div className={styles.clockBoxes}>   \n            { \n                mapArr.map(el => \n                    \n                    <Clock \n                        key={el['id']}\n                        regionName={el['country']}\n                        cityName={el['city']}\n                        utcoffset={el['utcoffset']}\n                        openHoursOne={el['openHoursOne']}\n                        openHoursTwo={el['openHoursTwo']}\n                    />) \n            }\n        </div>); \n\n        return returnArr; \n\n    }\n\n    //need to optimize this part \n    const renderByContinent = (continentName) =>{\n\n       //mapArr\n        let europe = []; \n        let asia = []; \n        let southAmerica = []; \n        let northAmerica = []; \n\n        //returnArr\n        let eur = []; \n        let as = []; \n        let southA = []; \n        let northA = []; \n        \n        \n        data.forEach(d => {\n\n            if(d.continent === 'Europe'){\n                europe.push(d); \n            } else if(d.continent === 'Asia'){\n                asia.push(d);\n            } else if(d.continent == 'South America'){\n                southAmerica.push(d); \n            } else if(d.continent == 'North America'){\n                northAmerica.push(d); \n            } \n        }); \n\n          \n        switch(continentName){\n            case 'Asia': \n                return continentMap(as, asia);  \n            case 'Europe': \n                return continentMap(eur, europe);  \n            case 'South America': \n                return continentMap(southA, southAmerica); \n            case 'North America':\n                return continentMap(northA, northAmerica);; \n            default: \n                return 0; \n        }\n    }\n\n\n    return (\n        <div className={styles.regionBox}>\n            <div className={styles.greyStripe}>\n                <div className={styles.left}>{continentName}</div>\n                <div className={styles.right}>\n                    { isLoading && <div>Loading...</div> }\n                    { show ?  \n                        <AiFillMinusCircle onClick={showHandler}/> : \n                        <AiFillPlusCircle onClick={showHandler}/>\n                    }  \n                </div>\n            </div>\n            { show && renderByContinent(continentName)}\n            \n        </div>\n    )\n}\n\nexport default RegionBox; \n","import React from 'react'; \nimport Form from 'react-bootstrap/Form';\n\nimport * as styles from './ContinentDropdown.module.scss'; \n\n\nconst ContinentDropdown = ({ continent }) => {\n\n\n    const handleChange = (e) =>{\n        continent(e.target.value); \n    }\n\n\n    return (\n        <div className={styles.ddWrapper}>\n            <Form>\n                <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                    <Form.Label>Select Continent</Form.Label>\n                    <Form.Control as=\"select\" onChange={(e) => handleChange(e)}>\n                        <option>Choose Option</option>\n                        <option>Asia</option>\n                        <option>Europe</option>\n                        <option>North America</option>\n                        <option>South America</option>\n                    </Form.Control>\n                </Form.Group>\n            </Form>\n        </div>       \n    )\n}\n\nexport default ContinentDropdown;\n","import React, { useState } from 'react'; \nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\n\n\nconst GeoSelector = ({ geo }) => {\n\n    const [ geoCountry, setGeoCountry ] = useState(''); \n    const [ geoCity, setGeoCity ] = useState(''); \n\n\n\n    const selectCountry = (val) => {\n        setGeoCountry(geoCountry => val); \n    }\n\n    const selectRegion = (val) => {\n        setGeoCity(geoCity => val);\n        geo([geoCountry, val]); \n    }\n\n\n   \n\n    return (\n        <div>\n\n            <CountryDropdown \n                value={geoCountry}\n                onChange={val => selectCountry(val)}\n                //onChange={(e) => selectCountry(e)}\n\n                style={{ color: 'grey', fontSize: '17px', height: '40px'}}\n                >{geoCountry}</CountryDropdown>\n\n            <RegionDropdown \n                country={geoCountry}\n                value={geoCity}\n                //onChange={(e) => selectRegion(e)}\n                onChange={val => selectRegion(val)}\n\n                style={{ color: 'grey', fontSize: '17px', height: '40px', boxShadow: 'grey'}}\n                blankOptionLabel=\"No country selected\"\n                defaultOptionLabel=\"Now select a region\"\n                >{geoCity}</RegionDropdown>   \n\n \n        </div>\n    )\n}\n\nexport default GeoSelector; \n","import React, { useState } from 'react';\n\nimport * as styles from './TimeSelector.module.scss'; \nimport TextField from '@material-ui/core/TextField';\n\nconst TimeSelector = ({ timeSlotOne, timeSlotTwo }) => {\n\n    const [timeFrom, onChangeTimeFrom] = useState('00:00');\n    const [timeTo, onChangeTimeTo] = useState('00:00');\n\n    const [secondTimeFrom, onChangeSecondTimeFrom] = useState('00:00');\n    const [secondTimeTo, onChangeSecondTimeTo] = useState('00:00');\n\n\n    const selectTimeFrom = (e) => {\n        onChangeTimeFrom(timeFrom => e.target.value); \n    }\n\n    const selectTimeTo = (e) => {\n        onChangeTimeTo(timeTo => e.target.value); \n        timeSlotOne([timeFrom, e.target.value]); \n    }\n\n\n    const selectSecondTimeFrom = (e) => {\n        onChangeSecondTimeFrom(secondTimeFrom => e.target.value); \n    }\n\n    const selectSecondTimeTo = (e) => {\n        onChangeSecondTimeTo(secondTimeTo => e.target.value); \n        timeSlotTwo([secondTimeFrom, e.target.value]); \n    }\n\n\n    return (\n    <form className={styles.container} noValidate >\n\n        <TextField\n            className={styles.textField}\n            id=\"time\"\n            label=\"From\"\n            type=\"time\"\n            defaultValue=\"07:30\"\n            value={timeFrom}\n            onChange={e => selectTimeFrom(e)}\n            InputLabelProps={{\n            shrink: true,\n            }}\n            inputProps={{\n            step: 300, // 5 min\n            }}\n        />\n    \n\n        <TextField\n            className={styles.textField}\n            id=\"time\"\n            label=\"To\"\n            type=\"time\"\n            defaultValue=\"07:30\"\n            value={timeTo}\n            onChange={e => selectTimeTo(e)}\n\n            InputLabelProps={{\n            shrink: true,\n            }}\n            inputProps={{\n            step: 300, // 5 min\n            }}\n        />\n\n        <div className={styles.divider}> Input Second TimeSlot </div>\n\n        <TextField\n            className={styles.textField}\n            id=\"time\"\n            label=\"From\"\n            type=\"time\"\n            defaultValue=\"07:30\"\n            value={secondTimeFrom}\n            onChange={e => selectSecondTimeFrom(e)}\n            InputLabelProps={{\n            shrink: true,\n            }}\n            inputProps={{\n            step: 300, // 5 min\n            }}\n        />\n    \n\n        <TextField\n            className={styles.textField}\n            id=\"time\"\n            label=\"To\"\n            type=\"time\"\n            defaultValue=\"07:30\"\n            value={secondTimeTo}\n            onChange={e => selectSecondTimeTo(e)}\n\n            InputLabelProps={{\n            shrink: true,\n            }}\n            inputProps={{\n            step: 300, // 5 min\n            }}\n        />\n\n    </form>\n            \n    )\n}\n\nexport default TimeSelector; \n","import React, { useEffect, useState } from 'react'; \n\n\nimport ContinentDropdown from '../continentDropdown/ContinentDropdown'; \nimport GeoSelector from '../geoSelector/GeoSelector';\nimport TimeSelector from '../timeSelector/TimeSelector'; \nimport * as Constants from '../../constants'; \nimport * as styles from './AdminPanel.module.scss'; \n\nconst AdminPanel = () => {\n\n    //const initialFormData = { continent: '', country: '', city: '', timeSlotOne: {from: '', to: ''}, timeSlotTwo: {from: '', to: ''}}; \n    const [ formData, setFormData ] = useState({ continent: '', country: '', city: '', utcoffset: ''}); \n    const [ timeSlotOne, setTimeSlotOne ] = useState({ from: '', to: ''}); \n    const [ timeSlotTwo, setTimeSlotTwo ] = useState({ from: '', to: ''}); \n\n    \n\n    const postData = async(url) => {\n\n        const info = {\n                    \"id\": `${Math.floor(Math.random() * 1000001)}`, \n                    \"continent\": formData.continent, \n                    \"country\": formData.country,\n                    \"city\": formData.city, \n                    \"utcoffset\": `${formData.utcoffset*60}`,\n                    \"openHoursOne\": `${timeSlotOne.from}-${timeSlotOne.to}`,\n                    \"openHoursTwo\": `${timeSlotTwo.from}-${timeSlotTwo.to}`\n                }\n\n        const bod = {\n            \"id\":\"56100\", \n            \"continent\": \"Europe\", \n            \"country\": \"Ukraine\",\n            \"city\": \"\", \n            \"utcoffset\":\"+180\",\n            \"openHoursOne\": \"15:00-17:00\",\n            \"openHoursTwo\": \"\"\n        }; \n\n        const response = await fetch(url, {\n            method: 'POST',\n            mode: 'cors',  \n            headers: { 'Content-Type': 'application/json' }, \n            body: JSON.stringify(info) \n        }); \n\n        return response.json(); \n\n    }\n\n    const handlePost = () => {\n        postData(Constants.POST_URL).then(data => console.log(data)); \n    }\n\n\n\n\n\n    return (\n        <div className={styles.mainContainer}>\n            <div className={styles.contentBox}>\n\n                <ContinentDropdown continent={selectedContinent => setFormData({...formData, continent: selectedContinent})}/>\n                \n                <div className={styles.input}>\n                    <div className={styles.input}>Choose country and region</div>\n                    <GeoSelector \n                        geo={selectedGeo => setFormData({...formData, country: selectedGeo[0], city: selectedGeo[1]})}/>\n                </div>\n\n                <div className={styles.input}>\n                    <div className={styles.input}>If there is more than one slot, input one more time slot of opening hours</div>\n                    <TimeSelector\n                        timeSlotOne={selectedTimeSlotOne => setTimeSlotOne({ ...timeSlotOne, from: selectedTimeSlotOne[0], to: selectedTimeSlotOne[1]})}\n                        timeSlotTwo={selectedTimeSlotTwo => setTimeSlotTwo({ ...timeSlotTwo, from: selectedTimeSlotTwo[0], to: selectedTimeSlotTwo[1]})}/>\n                </div>\n\n                <div className={styles.input}>\n                    <div>Enter UTC offcet (consider inputing with (+/-) value)</div>\n                    <input type=\"text\" placeholder=\"UTC offset\" onChange={e => setFormData({...formData, utcoffset: e.target.value })}/>\n                </div>\n\n                <div className={styles.submitBox}>\n                    <button className={styles.submitBtn} onClick={handlePost}>Submit</button>\n                </div>\n                \n            </div> \n        </div>\n    )\n}\n\nexport default AdminPanel; \n","export const GET_URL = 'https://rsqwsiljhg.execute-api.us-east-1.amazonaws.com/dev/clocksfunction'; \nexport const POST_URL = 'https://rsqwsiljhg.execute-api.us-east-1.amazonaws.com/dev/postClocksRecord'; ","import React from 'react'; \nimport * as styles from './Footer.module.scss'; \n\n\nconst Footer = () => {\n    return (\n        <div className={styles.Footer}>\n            <div className={styles.copyright}>© Copyright Ironfly Technologies Limited 2021</div>   \n        </div>\n    )\n}\n\nexport default Footer\n","import React, { useState, useEffect } from 'react'; \n\nimport * as Constants from './constants'; \nimport * as styles from './App.module.scss';\nimport RegionBox from './components/regionBox/RegionBox'; \nimport AdminPanel from './components/adminPanel/AdminPanel'; \nimport Footer from './components/footer/Footer'; \nimport Orbitals from '@bit/joshk.react-spinners-css.orbitals';\n\n\n// const body = \n// [ \n//     {\n//         \"id\":\"123\", \n//         \"continent\":\"Europe\", \n//         \"country\":\"Netherlands\",\n//         \"city\":\"Amsterdam\", \n//         \"utcoffset\":\"60\",\n//         \"openHoursOne\":\"11:00-14:00\",\n//         \"openingHoursTwo\":\"15:00-17:00\" \n\n//     },\n//     {\n//         \"id\":\"456\", \n//         \"continent\":\"Asia\", \n//         \"country\":\"China\",\n//         \"city\":\"Shanghai\", \n//         \"utcoffset\":\"480\",\n//         \"openHoursOne\":\"11:00-14:00\",\n//         \"openingHoursTwo\":\"15:00-17:00\" \n\n//     }, \n//     {\n//         \"id\":\"789\", \n//         \"continent\":\"South America\", \n//         \"country\":\"Brazil\",\n//         \"city\":\"San Paolo\", \n//         \"utcoffset\":\"180\",\n//         \"openHoursOne\":\"11:00-14:00\",\n//         \"openingHoursTwo\":\"15:00-17:00\" \n\n//     }, \n\n//     {\n//       \"id\":\"1122\", \n//       \"continent\":\"Europe\", \n//       \"country\":\"Ukraine\",\n//       \"city\":\"Kyiv\", \n//       \"utcoffset\":\"60\",\n//       \"openHoursOne\":\"11:00-14:00\",\n//       \"openingHoursTwo\":\"15:00-17:00\" \n\n//   }\n\n// ]\n\nconst App = ()  => {\n\n  let uniqueContinents = [];\n  let continents = []; \n  //delete this\n  let arr = []; \n\n  const [ showAdminPanel, setshowAdminPanel] = useState(false);\n  const [ data, setData ] = useState([]);  \n  const [ loading, setLoading ] = useState(false); \n  \n  const showAdminHandler = () => {\n    setshowAdminPanel(showAdminPanel => !showAdminPanel); \n  } \n\n\n  const fetchData = async(url) => {\n    setLoading(loading => true); \n    const response = await fetch(url);\n\n    try{\n      const body = await response.json(); \n      setLoading(loading => false); \n      //for testing single clock\n      //arr.push(body.data.Items[1]); \n      //arr.push(body.data.Items[9]); \n      //console.log(body.data.Items[8]); \n      setData(data => body.data.Items);\n      //console.log(data); \n      //setData(data => arr);\n    }catch(error){\n      console.log('Error happened here!')\n      console.error(error); \n    }\n     \n    //setLoading(true); \n  }\n\n\n\n\n  for (let key in data) {\n    continents.push(data[key].continent);    \n  }\n\n  uniqueContinents = continents.filter((v, i, a) => a.indexOf(v) === i);\n\n  let regionBox = uniqueContinents.map( cont => \n    <RegionBox \n      key={cont.id} \n      continentName={cont} \n      data={data}/>\n  )\n\n\n  useEffect(() => {\n    fetchData(Constants.GET_URL); \n  },[]); \n\n\n  return (\n    <div className={styles.App}>\n      <div className={styles.titleBox}>\n        <div className={styles.title} >The Markets Open</div>\n      </div>\n      <div className={styles.mainContentBox}>\n\n        {loading ? <div className={styles.loader}><Orbitals color=\"rgb(70, 190, 112)\" /></div> : regionBox}\n\n        {/* {\n          uniqueContinents.map( cont => \n            <RegionBox \n              key={cont.id} \n              continentName={cont} \n              data={data}/>\n          )\n        } */}\n       \n\n        \n        <div className={styles.buttonContainer}>\n          <button onClick={showAdminHandler}>Admin Panel</button>    \n        </div>\n\n\n          {showAdminPanel && <AdminPanel/>}\n\n      \n      </div>\n\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as styles from'./index.module.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}